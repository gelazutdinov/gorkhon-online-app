import { spawn } from 'child_process';

console.log('üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤...\n');

async function runTest() {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...');
  
  try {
    const result = await testServer('tsx', ['server/src/app.ts'], '–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π');
    if (result.success) {
      console.log('‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      return;
    }
  } catch (error) {
    console.log('‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã:', error.message);
  }

  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä...');
  
  try {
    const result = await testServer('tsx', ['server/src/simple-app.ts'], '–Ω–æ–≤—ã–π');
    if (result.success) {
      console.log('‚úÖ –ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
    }
  } catch (error) {
    console.log('‚ùå –ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã:', error.message);
  }
}

function testServer(command, args, name) {
  return new Promise((resolve, reject) => {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ${name} —Å–µ—Ä–≤–µ—Ä...`);
    
    const serverProcess = spawn(command, args, {
      stdio: 'pipe'
    });

    let hasError = false;
    let output = '';

    const timeout = setTimeout(() => {
      if (!hasError) {
        console.log(`‚úÖ ${name.charAt(0).toUpperCase() + name.slice(1)} —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ`);
        serverProcess.kill();
        resolve({ success: true, output });
      }
    }, 5000);

    serverProcess.stdout.on('data', (data) => {
      const text = data.toString();
      output += text;
      console.log(`üìã [${name}]:`, text.trim());
    });

    serverProcess.stderr.on('data', (data) => {
      const text = data.toString();
      output += text;
      console.error(`‚ùå [${name}]:`, text.trim());
      hasError = true;
      clearTimeout(timeout);
      serverProcess.kill();
      reject(new Error(`–û—à–∏–±–∫–∞ –≤ ${name} —Å–µ—Ä–≤–µ—Ä–µ: ${text.trim()}`));
    });

    serverProcess.on('close', (code) => {
      clearTimeout(timeout);
      if (code !== 0 && !hasError) {
        reject(new Error(`${name.charAt(0).toUpperCase() + name.slice(1)} —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
      }
    });
  });
}

runTest().catch(console.error);