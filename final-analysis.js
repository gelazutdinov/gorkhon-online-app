const fs = require('fs');
const path = require('path');

console.log('üîç –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò TYPESCRIPT –°–ï–†–í–ï–†–ê');
console.log('=' .repeat(50));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
const checks = [
  {
    file: 'server/src/app.ts',
    description: '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞',
    critical: true
  },
  {
    file: 'server/.env',
    description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞',
    critical: true
  },
  {
    file: 'server/src/routes/auth.ts',
    description: '–ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
    critical: true
  },
  {
    file: 'server/src/routes/users.ts',
    description: '–ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    critical: true
  },
  {
    file: 'server/src/routes/admin.ts',
    description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã',
    critical: true
  },
  {
    file: 'server/src/services/DatabaseService.ts',
    description: '–°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    critical: true
  },
  {
    file: 'server/src/middleware/auth.ts',
    description: 'Middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
    critical: true
  },
  {
    file: 'server/src/middleware/errorHandler.ts',
    description: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫',
    critical: true
  },
  {
    file: 'package.json',
    description: '–ü–∞–∫–µ—Ç–Ω—ã–π —Ñ–∞–π–ª —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏',
    critical: true
  }
];

let allFilesExist = true;

console.log('\nüìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:');
checks.forEach(check => {
  const exists = fs.existsSync(check.file);
  const status = exists ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${check.description}: ${check.file}`);
  
  if (!exists && check.critical) {
    allFilesExist = false;
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json –Ω–∞ –Ω–∞–ª–∏—á–∏–µ tsx
if (fs.existsSync('package.json')) {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const hasTsx = packageJson.devDependencies?.tsx;
  
  console.log('\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:');
  console.log(`${hasTsx ? '‚úÖ' : '‚ùå'} tsx: ${hasTsx || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
  console.log(`‚úÖ express: ${packageJson.devDependencies?.express || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é'}`);
  console.log(`‚úÖ sqlite3: ${packageJson.devDependencies?.sqlite3 || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é'}`);
  console.log(`‚úÖ bcryptjs: ${packageJson.devDependencies?.bcryptjs || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é'}`);
  console.log(`‚úÖ jsonwebtoken: ${packageJson.devDependencies?.jsonwebtoken || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é'}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
if (fs.existsSync('server/.env')) {
  const envContent = fs.readFileSync('server/.env', 'utf8');
  console.log('\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ï–†–ê:');
  
  const port = envContent.match(/PORT=(.+)/)?.[1];
  const nodeEnv = envContent.match(/NODE_ENV=(.+)/)?.[1];
  const jwtSecret = envContent.match(/JWT_SECRET=(.+)/)?.[1];
  
  console.log(`‚úÖ PORT: ${port || '3001 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`);
  console.log(`‚úÖ NODE_ENV: ${nodeEnv || 'development'}`);
  console.log(`‚úÖ JWT_SECRET: ${jwtSecret ? '–ù–ê–°–¢–†–û–ï–ù' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
}

console.log('\nüéØ –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ó–ê–ü–£–°–ö–ê:');
console.log('cd server && npx tsx src/app.ts');

console.log('\nüß™ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
console.log('1. Health Check:');
console.log('   curl http://localhost:3001/api/health');
console.log('');
console.log('2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:');
console.log('   curl -X POST http://localhost:3001/api/auth/register \\');
console.log('   -H "Content-Type: application/json" \\');
console.log('   -d \'{"email": "test@test.com", "password": "123456", "name": "Test User"}\'');
console.log('');
console.log('3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
console.log('   curl -X POST http://localhost:3001/api/auth/login \\');
console.log('   -H "Content-Type: application/json" \\');
console.log('   -d \'{"email": "smm@gelazutdinov.ru", "password": "admin123"}\'');

console.log('\nüìä –û–ñ–ò–î–ê–ï–ú–û–ï –ü–û–í–ï–î–ï–ù–ò–ï:');
console.log('üî• –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 3001');
console.log('üìÅ –°–æ–∑–¥–∞—Å—Ç—Å—è —Ñ–∞–π–ª server/database.sqlite');
console.log('üëë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–¥–º–∏–Ω: smm@gelazutdinov.ru / admin123');
console.log('‚úÖ –í—Å–µ endpoints –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É /api/*');
console.log('üõ°Ô∏è –ë—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (CORS, Helmet, Rate Limiting)');

if (allFilesExist) {
  console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ì–û–¢–û–í–´ –ö –ó–ê–ü–£–°–ö–£!');
  console.log('–°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.');
} else {
  console.log('\n‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –§–ê–ô–õ–´!');
  console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.');
}

console.log('\nüí° –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:');
console.log('–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞—Å—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite');
console.log('–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');