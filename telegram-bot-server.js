// üöÄ TELEGRAM BOT SERVER –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –°–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏

const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// –ë–∞–∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –ë–î)
let subscribers = new Set();
let botToken = '';

// üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
const log = (message, data = '') => {
  console.log(`[${new Date().toISOString()}] ${message}`, data);
};

// ‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ï–†–ê
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    subscribers: subscribers.size,
    botConfigured: !!botToken 
  });
});

// üîß –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê
app.post('/api/bot/config', async (req, res) => {
  try {
    const { token } = req.body;
    
    if (!token) {
      return res.status(400).json({ error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const response = await fetch(`https://api.telegram.org/bot${token}/getMe`);
    const data = await response.json();
    
    if (!data.ok) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' });
    }

    botToken = token;
    log('‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', data.result.username);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    await setupWebhook(token);
    
    res.json({ 
      success: true, 
      botInfo: data.result,
      subscribersCount: subscribers.size 
    });
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', error.message);
    res.status(500).json({ error: error.message });
  }
});

// üì¨ –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í–°–ï–ú –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú
app.post('/api/notifications/send', async (req, res) => {
  try {
    const { title, message, type } = req.body;
    
    if (!botToken) {
      return res.status(400).json({ error: '–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    if (!title || !message) {
      return res.status(400).json({ error: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const fullMessage = `üîî *${title}*\n\n${message}`;
    const results = [];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    for (const chatId of subscribers) {
      try {
        const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            text: fullMessage,
            parse_mode: 'Markdown'
          })
        });

        const data = await response.json();
        
        if (data.ok) {
          results.push({ chatId, status: 'sent' });
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - —É–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
          if (data.error_code === 403) {
            subscribers.delete(chatId);
            log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}`);
          }
          results.push({ chatId, status: 'failed', error: data.description });
        }
      } catch (err) {
        results.push({ chatId, status: 'error', error: err.message });
      }
    }

    log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${results.filter(r => r.status === 'sent').length}/${subscribers.size}`);
    
    res.json({ 
      success: true, 
      sent: results.filter(r => r.status === 'sent').length,
      total: subscribers.size,
      results 
    });
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
    res.status(500).json({ error: error.message });
  }
});

// üë• –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–î–ü–ò–°–ß–ò–ö–û–í
app.get('/api/subscribers', (req, res) => {
  res.json({ 
    count: subscribers.size,
    subscribers: Array.from(subscribers) 
  });
});

// üéØ WEBHOOK –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
app.post('/webhook', (req, res) => {
  try {
    const update = req.body;
    
    if (update.message) {
      const chatId = update.message.chat.id;
      const username = update.message.from.username || update.message.from.first_name;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
      if (!subscribers.has(chatId)) {
        subscribers.add(chatId);
        log(`‚ûï –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: ${username} (${chatId})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sendWelcomeMessage(chatId, username);
      }
    }
    
    res.sendStatus(200);
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ webhook:', error.message);
    res.sendStatus(200);
  }
});

// üëã –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
async function sendWelcomeMessage(chatId, username) {
  if (!botToken) return;
  
  const welcomeText = `üëã –ü—Ä–∏–≤–µ—Ç, ${username}!\n\nüîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.`;
  
  try {
    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: welcomeText
      })
    });
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error.message);
  }
}

// üîó –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK
async function setupWebhook(token) {
  // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π URL
  const webhookUrl = `${process.env.SERVER_URL || 'http://localhost:3001'}/webhook`;
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${token}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: webhookUrl })
    });
    
    const data = await response.json();
    log('üîó Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', webhookUrl);
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ webhook:', error.message);
  }
}

// üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
app.listen(PORT, () => {
  log(`üöÄ Telegram —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:`);
  log(`   ‚Ä¢ GET  /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞`);
  log(`   ‚Ä¢ POST /api/bot/config - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞`);
  log(`   ‚Ä¢ POST /api/notifications/send - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
  log(`   ‚Ä¢ GET  /api/subscribers - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);
});

module.exports = app;