#!/usr/bin/env node

/**
 * üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê –†–ê–ó–†–ê–ë–û–¢–ö–ò
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤
 * 2. –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
 * 3. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * 4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */

const { spawn, exec } = require('child_process');
const net = require('net');
const fs = require('fs');

console.log('üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –†–ê–ó–†–ê–ë–û–¢–ö–ò');
console.log('============================\n');

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
async function checkPort(port) {
    return new Promise((resolve) => {
        const server = net.createServer();
        server.listen(port, () => {
            server.close(() => resolve(false)); // –°–≤–æ–±–æ–¥–µ–Ω
        });
        server.on('error', () => resolve(true)); // –ó–∞–Ω—è—Ç
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function startDevServer() {
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
        console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        
        if (!pkg.scripts?.dev) {
            console.log('‚ùå –°–∫—Ä–∏–ø—Ç dev –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ package.json');
            return;
        }
        
        console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç: ${pkg.name}`);
        console.log(`‚úÖ –°–∫—Ä–∏–ø—Ç dev: ${pkg.scripts.dev}\n`);
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...');
        const ports = [
            { port: 5173, name: 'Vite Dev Server' },
            { port: 3000, name: 'React Dev Server' },
            { port: 3001, name: 'Backend API' }
        ];
        
        const portStatus = {};
        for (const { port, name } of ports) {
            const occupied = await checkPort(port);
            portStatus[port] = occupied;
            console.log(`   –ü–æ—Ä—Ç ${port} (${name}): ${occupied ? 'üî¥ –ó–ê–ù–Ø–¢' : 'üü¢ –°–í–û–ë–û–î–ï–ù'}`);
        }
        
        // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const frontendPorts = [5173, 3000];
        const occupiedFrontend = frontendPorts.filter(port => portStatus[port]);
        
        if (occupiedFrontend.length > 0) {
            console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', occupiedFrontend.join(', '));
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤...');
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            const killCommands = [
                'pkill -f vite 2>/dev/null || true',
                'pkill -f "npm.*dev" 2>/dev/null || true',
                'pkill -f "yarn.*dev" 2>/dev/null || true'
            ];
            
            for (const cmd of killCommands) {
                try {
                    await new Promise((resolve, reject) => {
                        exec(cmd, (error) => {
                            if (error) reject(error);
                            else resolve();
                        });
                    });
                    console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${cmd.split('2>/dev/null')[0].trim()}`);
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }
            
            console.log('   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ (2 —Å–µ–∫—É–Ω–¥—ã)...\n');
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
        // 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–µ–Ω–¥–µ
        if (portStatus[3001]) {
            console.log('‚úÖ –ë—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
            console.log('   API –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:3001/api');
            console.log('   Health: http://localhost:3001/api/health\n');
        } else {
            console.log('‚ÑπÔ∏è  –ë—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
            console.log('   –î–ª—è –∑–∞–ø—É—Å–∫–∞: cd server && node quick-server.js\n');
        }
        
        // 5. –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä–∞
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...\n');
        console.log('‚îÄ'.repeat(50));
        
        const devServer = spawn('npm', ['run', 'dev'], {
            stdio: 'inherit' // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –≤–≤–æ–¥/–≤—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        });
        
        console.log(`\nüìä PID –ø—Ä–æ—Ü–µ—Å—Å–∞: ${devServer.pid}`);
        console.log('‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
        console.log('üîó –û–±—ã—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:5173');
        console.log('üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        process.on('SIGINT', () => {
            console.log('\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
            console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
            devServer.kill('SIGINT');
            
            setTimeout(() => {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
                process.exit(0);
            }, 1000);
        });
        
        devServer.on('close', (code) => {
            console.log(`\nüìä –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
            
            if (code !== 0) {
                console.log('\n‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
                console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
                console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install');
                console.log('   2. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: npm run build:dev');
                console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã: node check_ports_only.js');
            }
            
            process.exit(code);
        });
        
        devServer.on('error', (error) => {
            console.error(`\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
            console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
            console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            console.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm install');
            console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ package.json');
            process.exit(1);
        });
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        console.log('\nüîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫:');
        console.log('   npm run dev');
        process.exit(1);
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
console.log('üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï:');
console.log('   ‚Ä¢ –§—Ä–æ–Ω—Ç–µ–Ω–¥: React + TypeScript + Vite');
console.log('   ‚Ä¢ –û–±—ã—á–Ω—ã–π –ø–æ—Ä—Ç: 5173');
console.log('   ‚Ä¢ –ë—ç–∫–µ–Ω–¥ API: http://localhost:3001/api');
console.log('');

console.log('üîß –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:');
console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤: node check_ports_only.js');
console.log('   ‚Ä¢ –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞: cd server && node quick-server.js');
console.log('   ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã: pkill -f vite');
console.log('');

// –ó–∞–ø—É—Å–∫
startDevServer().catch(console.error);