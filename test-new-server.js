#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ù–û–í–û–ì–û –°–ï–†–í–ï–†–ê');
console.log('=' .repeat(50));

const SERVER_URL = 'http://localhost:3001';
const TEST_CREDENTIALS = {
  email: 'smm@gelazutdinov.ru',
  password: 'admin123'
};

let serverProcess = null;
let testResults = {
  serverStart: false,
  healthCheck: false,
  login: false,
  register: false,
  authMe: false,
  logout: false,
  notFound: false
};

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function makeRequest(url, options = {}) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (Node 18+), –∏–Ω–∞—á–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º node-fetch
    let fetch;
    if (global.fetch) {
      fetch = global.fetch;
    } else {
      fetch = (await import('node-fetch')).default;
    }
    
    const response = await fetch(url, {
      timeout: 5000,
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    });
    
    const data = await response.json();
    return { success: true, status: response.status, data, response };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

async function startServer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  return new Promise((resolve, reject) => {
    const serverPath = path.join(__dirname, 'server', 'quick-server.js');
    
    if (!fs.existsSync(serverPath)) {
      return reject(new Error(`–§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${serverPath}`));
    }
    
    serverProcess = spawn('node', [serverPath], {
      stdio: ['ignore', 'pipe', 'pipe'],
      cwd: path.join(__dirname, 'server')
    });
    
    let output = '';
    let errorOutput = '';
    
    serverProcess.stdout.on('data', (data) => {
      output += data.toString();
      console.log('üìù Server output:', data.toString().trim());
      
      if (output.includes('–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢')) {
        testResults.serverStart = true;
        resolve(true);
      }
    });
    
    serverProcess.stderr.on('data', (data) => {
      errorOutput += data.toString();
      console.error('‚ùå Server error:', data.toString().trim());
    });
    
    serverProcess.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
      reject(error);
    });
    
    serverProcess.on('exit', (code) => {
      if (code !== 0 && code !== null) {
        reject(new Error(`–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}. Error: ${errorOutput}`));
      }
    });
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    setTimeout(() => {
      if (!testResults.serverStart) {
        reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥'));
      }
    }, 10000);
  });
}

async function testHealthEndpoint() {
  console.log('üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/health...');
  
  const result = await makeRequest(`${SERVER_URL}/api/health`);
  
  if (result.success && result.status === 200) {
    console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –î–∞–Ω–Ω—ã–µ:', JSON.stringify(result.data, null, 2));
    testResults.healthCheck = true;
    return true;
  } else {
    console.error('‚ùå Health endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.error || result.data);
    return false;
  }
}

async function testLogin() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞...');
  
  const result = await makeRequest(`${SERVER_URL}/api/auth/login`, {
    method: 'POST',
    body: JSON.stringify(TEST_CREDENTIALS)
  });
  
  if (result.success && result.status === 200 && result.data.success) {
    console.log('‚úÖ –õ–æ–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', result.data.data.user.name);
    console.log('üé´ –¢–æ–∫–µ–Ω:', result.data.data.token.substring(0, 20) + '...');
    testResults.login = true;
    return result.data.data.token;
  } else {
    console.error('‚ùå –õ–æ–≥–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.error || result.data);
    return null;
  }
}

async function testRegister() {
  console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
  
  const testUser = {
    email: `test${Date.now()}@test.com`,
    password: 'testpass123',
    name: 'Test User'
  };
  
  const result = await makeRequest(`${SERVER_URL}/api/auth/register`, {
    method: 'POST',
    body: JSON.stringify(testUser)
  });
  
  if (result.success && result.status === 200 && result.data.success) {
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', result.data.data.user.name);
    testResults.register = true;
    return true;
  } else {
    console.error('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.error || result.data);
    return false;
  }
}

async function testAuthMe(token) {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/auth/me...');
  
  if (!token) {
    console.error('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    return false;
  }
  
  const result = await makeRequest(`${SERVER_URL}/api/auth/me`, {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  
  if (result.success && result.status === 200 && result.data.success) {
    console.log('‚úÖ Auth me —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', result.data.data.user.name);
    testResults.authMe = true;
    return true;
  } else {
    console.error('‚ùå Auth me –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.error || result.data);
    return false;
  }
}

async function testLogout() {
  console.log('üö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ logout...');
  
  const result = await makeRequest(`${SERVER_URL}/api/auth/logout`, {
    method: 'POST'
  });
  
  if (result.success && result.status === 200 && result.data.success) {
    console.log('‚úÖ Logout —Ä–∞–±–æ—Ç–∞–µ—Ç');
    testResults.logout = true;
    return true;
  } else {
    console.error('‚ùå Logout –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.error || result.data);
    return false;
  }
}

async function testNotFound() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 404 endpoint...');
  
  const result = await makeRequest(`${SERVER_URL}/api/nonexistent`);
  
  if (result.success && result.status === 404 && !result.data.success) {
    console.log('‚úÖ 404 –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    testResults.notFound = true;
    return true;
  } else {
    console.error('‚ùå 404 –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.error || result.data);
    return false;
  }
}

function stopServer() {
  if (serverProcess) {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    serverProcess.kill('SIGTERM');
    
    setTimeout(() => {
      if (serverProcess && !serverProcess.killed) {
        serverProcess.kill('SIGKILL');
      }
    }, 5000);
  }
}

function printReport() {
  console.log('\n' + '='.repeat(50));
  console.log('üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
  console.log('='.repeat(50));
  
  const tests = [
    { name: '–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞', result: testResults.serverStart },
    { name: 'Health endpoint', result: testResults.healthCheck },
    { name: '–õ–æ–≥–∏–Ω', result: testResults.login },
    { name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', result: testResults.register },
    { name: 'Auth me', result: testResults.authMe },
    { name: 'Logout', result: testResults.logout },
    { name: '404 –æ–±—Ä–∞–±–æ—Ç–∫–∞', result: testResults.notFound }
  ];
  
  tests.forEach(test => {
    const status = test.result ? '‚úÖ PASS' : '‚ùå FAIL';
    console.log(`${status} ${test.name}`);
  });
  
  const passedTests = tests.filter(t => t.result).length;
  const totalTests = tests.length;
  
  console.log('\n' + '='.repeat(50));
  console.log(`üìà –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
  
  if (passedTests === totalTests) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.');
  }
  console.log('='.repeat(50));
}

async function runTests() {
  try {
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    await startServer();
    await delay(2000); // –î–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    await testHealthEndpoint();
    await delay(500);
    
    const token = await testLogin();
    await delay(500);
    
    await testRegister();
    await delay(500);
    
    await testAuthMe(token);
    await delay(500);
    
    await testLogout();
    await delay(500);
    
    await testNotFound();
    await delay(500);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    stopServer();
    await delay(1000);
    printReport();
    process.exit(testResults.serverStart && testResults.healthCheck && testResults.login ? 0 : 1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
  stopServer();
  process.exit(1);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  stopServer();
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  stopServer();
  process.exit(1);
});