const { execSync, spawn } = require('child_process');
const path = require('path');

console.log('üî• –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã tsx');
console.log('==========================\n');

// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–º–∞–Ω–¥—É tsx --version
console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º tsx...');
try {
  const version = execSync('npx tsx --version', { 
    encoding: 'utf8', 
    timeout: 10000,
    cwd: __dirname 
  });
  console.log(`‚úÖ tsx –≤–µ—Ä—Å–∏—è: ${version.trim()}\n`);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ tsx:', error.message);
  process.exit(1);
}

// –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É cd server && tsx src/app.ts
console.log('2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º: cd server && npx tsx src/app.ts');
console.log('============================================');

const serverDir = path.join(__dirname, 'server');

try {
  const serverProcess = spawn('npx', ['tsx', 'src/app.ts'], {
    cwd: serverDir,
    stdio: ['pipe', 'pipe', 'pipe'],
    shell: true
  });

  let output = '';
  let errorOutput = '';
  let serverReady = false;

  serverProcess.stdout.on('data', (data) => {
    const text = data.toString();
    output += text;
    
    // –í—ã–≤–æ–¥–∏–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const lines = text.trim().split('\n');
    lines.forEach(line => {
      if (line.trim()) {
        console.log(`üì§ ${line}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
    if (text.includes('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É') || text.includes('üöÄ')) {
      serverReady = true;
    }
  });

  serverProcess.stderr.on('data', (data) => {
    const text = data.toString();
    errorOutput += text;
    
    // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const lines = text.trim().split('\n');
    lines.forEach(line => {
      if (line.trim()) {
        console.log(`‚ùå ${line}`);
      }
    });
  });

  serverProcess.on('error', (error) => {
    console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error.message);
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
  const testTimeout = setTimeout(() => {
    console.log('\n‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
    serverProcess.kill('SIGTERM');
  }, 8000);

  serverProcess.on('close', (code, signal) => {
    clearTimeout(testTimeout);
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(50));
    
    console.log(`üîÑ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω - –ö–æ–¥: ${code}, –°–∏–≥–Ω–∞–ª: ${signal}`);
    
    if (serverReady) {
      console.log('‚úÖ –£–°–ü–ï–•: –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!');
      console.log('üéØ –ö–æ–º–∞–Ω–¥–∞ tsx src/app.ts —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (signal === 'SIGTERM') {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
      console.log('ü§î –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –Ω–µ –≤—ã–≤–µ–ª –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
    }
    
    console.log('\nüìã –ü–û–õ–ù–´–ï –õ–û–ì–ò –ó–ê–ü–£–°–ö–ê:');
    if (output.trim()) {
      console.log('--- –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –í–´–í–û–î ---');
      console.log(output);
    }
    
    if (errorOutput.trim()) {
      console.log('--- –û–®–ò–ë–ö–ò ---');
      console.log(errorOutput);
    }
    
    if (!output.trim() && !errorOutput.trim()) {
      console.log('(–ù–µ—Ç –ª–æ–≥–æ–≤)');
    }
    
    console.log('\n' + '='.repeat(50));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    const exitCode = serverReady ? 0 : (code || 1);
    setTimeout(() => process.exit(exitCode), 500);
  });

  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...\n');

} catch (error) {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
}