#!/usr/bin/env node

const { spawn, execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
function log(message, type = 'info') {
  const timestamp = new Date().toLocaleTimeString();
  const icons = {
    info: '‚ÑπÔ∏è',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    rocket: 'üöÄ',
    file: 'üìÅ',
    gear: '‚öôÔ∏è',
    time: '‚è∞'
  };
  console.log(`${icons[type] || '‚ÑπÔ∏è'} [${timestamp}] ${message}`);
}

async function main() {
  console.log('üî• –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê TYPESCRIPT –°–ï–†–í–ï–†–ê');
  console.log('='.repeat(60));
  console.log();

  // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ...', 'gear');
  
  try {
    const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
    log(`Node.js –≤–µ—Ä—Å–∏—è: ${nodeVersion}`, 'success');
  } catch (error) {
    log('Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error');
    process.exit(1);
  }

  try {
    const tsxVersion = execSync('npx tsx --version', { encoding: 'utf8', timeout: 15000 }).trim();
    log(`tsx –≤–µ—Ä—Å–∏—è: ${tsxVersion}`, 'success');
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ tsx: ${error.message}`, 'error');
    process.exit(1);
  }

  // –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
  log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...', 'file');
  
  const serverDir = path.join(__dirname, 'server');
  const appFile = path.join(serverDir, 'src', 'app.ts');
  
  if (!fs.existsSync(serverDir)) {
    log('–ü–∞–ø–∫–∞ server –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', 'error');
    process.exit(1);
  }
  log('–ü–∞–ø–∫–∞ server –Ω–∞–π–¥–µ–Ω–∞', 'success');
  
  if (!fs.existsSync(appFile)) {
    log('–§–∞–π–ª src/app.ts –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error');
    process.exit(1);
  }
  log('–§–∞–π–ª src/app.ts –Ω–∞–π–¥–µ–Ω', 'success');

  // –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  console.log();
  log('–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: cd server && npx tsx src/app.ts', 'rocket');
  console.log('‚îÄ'.repeat(60));

  return new Promise((resolve) => {
    const serverProcess = spawn('npx', ['tsx', 'src/app.ts'], {
      cwd: serverDir,
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: process.platform === 'win32'
    });

    let stdoutData = '';
    let stderrData = '';
    let serverStarted = false;
    let healthEndpointWorks = false;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ stdout
    serverProcess.stdout.on('data', (data) => {
      const text = data.toString();
      stdoutData += text;
      
      // –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
      text.split('\\n').forEach(line => {
        if (line.trim()) {
          console.log(`[OUT] ${line.trim()}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
          if (line.includes('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É') || 
              line.includes('üöÄ') || 
              line.includes('–∑–∞–ø—É—â–µ–Ω') ||
              line.includes('listening')) {
            serverStarted = true;
            log('–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!', 'success');
          }
        }
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ stderr
    serverProcess.stderr.on('data', (data) => {
      const text = data.toString();
      stderrData += text;
      
      text.split('\\n').forEach(line => {
        if (line.trim()) {
          console.log(`[ERR] ${line.trim()}`);
        }
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
    serverProcess.on('error', (error) => {
      log(`–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error.message}`, 'error');
    });

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoint —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
      if (serverStarted) {
        try {
          // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
          log('–ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...', 'gear');
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å
          const http = require('http');
          const options = {
            hostname: 'localhost',
            port: 3001,
            path: '/api/health',
            method: 'GET',
            timeout: 2000
          };

          const req = http.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
              if (res.statusCode === 200) {
                healthEndpointWorks = true;
                log('Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!', 'success');
                log(`–û—Ç–≤–µ—Ç: ${data.substring(0, 100)}...`, 'info');
              } else {
                log(`Health endpoint –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`, 'warning');
              }
            });
          });

          req.on('error', (error) => {
            log(`–û—à–∏–±–∫–∞ health endpoint: ${error.message}`, 'warning');
          });

          req.on('timeout', () => {
            req.destroy();
            log('Health endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (timeout)', 'warning');
          });

          req.end();
        } catch (error) {
          log(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint: ${error.message}`, 'warning');
        }
      }
    }, 3000);

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      log('–ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...', 'time');
      serverProcess.kill('SIGTERM');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (!serverProcess.killed) {
          serverProcess.kill('SIGKILL');
        }
      }, 2000);
    }, 8000);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    serverProcess.on('close', (code, signal) => {
      console.log();
      console.log('='.repeat(60));
      log('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'rocket');
      console.log('='.repeat(60));
      
      log(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω - –ö–æ–¥: ${code}, –°–∏–≥–Ω–∞–ª: ${signal}`, 'info');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      let testResult = 'UNKNOWN';
      let exitCode = 1;
      
      if (serverStarted && healthEndpointWorks) {
        testResult = '–ü–û–õ–ù–´–ô –£–°–ü–ï–•';
        exitCode = 0;
        log('‚ú® –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã!', 'success');
      } else if (serverStarted) {
        testResult = '–ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•';
        exitCode = 0;
        log('üåü –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'warning');
      } else if (signal === 'SIGTERM' && stdoutData.trim()) {
        testResult = '–í–û–ó–ú–û–ñ–ù–´–ô –£–°–ü–ï–•';
        exitCode = 0;
        log('ü§î –°–µ—Ä–≤–µ—Ä –≤—ã–¥–∞–ª –≤—ã–≤–æ–¥, –Ω–æ –±–µ–∑ —è–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ', 'warning');
      } else if (stderrData.trim() && !stdoutData.trim()) {
        testResult = '–û–®–ò–ë–ö–ê';
        log('üí• –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏', 'error');
      } else {
        testResult = '–ù–ï–£–î–ê–ß–ê';
        log('üòû –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è', 'error');
      }
      
      console.log();
      log(`üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${testResult}`, testResult.includes('–£–°–ü–ï–•') ? 'success' : 'error');
      
      // –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏
      console.log();
      log('üìã –ü–û–õ–ù–´–ï –õ–û–ì–ò –°–ï–†–í–ï–†–ê:', 'info');
      console.log('‚îÄ'.repeat(30) + ' STDOUT ' + '‚îÄ'.repeat(30));
      console.log(stdoutData || '(–ø—É—Å—Ç–æ)');
      
      if (stderrData.trim()) {
        console.log('‚îÄ'.repeat(30) + ' STDERR ' + '‚îÄ'.repeat(30));
        console.log(stderrData);
      }
      
      console.log('='.repeat(60));
      
      resolve(exitCode);
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
main().then(exitCode => {
  setTimeout(() => process.exit(exitCode), 500);
}).catch(error => {
  log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
  process.exit(1);
});