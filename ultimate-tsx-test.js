const { spawn } = require('child_process');
const path = require('path');

console.log('üéØ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê');
console.log('====================================\\n');

console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ:');
console.log(`   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${__dirname}`);
console.log(`   üéØ –ö–æ–º–∞–Ω–¥–∞: cd server && npx tsx src/app.ts`);
console.log(`   ‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 10 —Å–µ–∫—É–Ω–¥\\n`);

const serverDir = path.join(__dirname, 'server');
console.log(`üîç –ó–∞–ø—É—Å–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${serverDir}\\n`);

const child = spawn('npx', ['tsx', 'src/app.ts'], {
  cwd: serverDir,
  stdio: 'pipe'
});

let allOutput = '';
let hasServerMessage = false;

console.log('üì° –í–´–í–û–î –°–ï–†–í–ï–†–ê:');
console.log('-'.repeat(50));

child.stdout.on('data', (data) => {
  const text = data.toString();
  allOutput += text;
  
  // –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
  text.split('\\n').forEach(line => {
    if (line.trim()) {
      console.log(`[üì§] ${line.trim()}`);
      
      // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
      if (line.includes('–°–µ—Ä–≤–µ—Ä') || line.includes('–∑–∞–ø—É—â–µ–Ω') || line.includes('üöÄ') || line.includes('listening')) {
        hasServerMessage = true;
      }
    }
  });
});

child.stderr.on('data', (data) => {
  const text = data.toString();
  allOutput += text;
  
  text.split('\\n').forEach(line => {
    if (line.trim()) {
      console.log(`[‚ö†Ô∏è] ${line.trim()}`);
    }
  });
});

child.on('error', (error) => {
  console.log(`[üí•] –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error.message}`);
});

// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('-'.repeat(50));
  console.log('\\n‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ\\n');
  
  child.kill('SIGTERM');
  
  setTimeout(() => {
    console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('========================');
    
    if (hasServerMessage) {
      console.log('‚úÖ –£–°–ü–ï–•: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞!');
      console.log('üéØ –ö–æ–º–∞–Ω–¥–∞ tsx src/app.ts —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (allOutput.trim()) {
      console.log('‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –°–µ—Ä–≤–µ—Ä –≤—ã–¥–∞–ª –≤—ã–≤–æ–¥, –Ω–æ –±–µ–∑ —è–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ');
      console.log('ü§î –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π');
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê: –ù–µ—Ç –≤—ã–≤–æ–¥–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –æ—à–∏–±–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å, –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å tsx');
    }
    
    console.log('\\nüìã –ü–û–õ–ù–´–ô –í–´–í–û–î –°–ï–†–í–ï–†–ê:');
    console.log('========================');
    if (allOutput.trim()) {
      console.log(allOutput);
    } else {
      console.log('(–ù–ï–¢ –í–´–í–û–î–ê)');
    }
    
    console.log('\\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    console.log('========================');
    
    process.exit(hasServerMessage ? 0 : 1);
  }, 1000);
}, 10000);

console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (10 —Å–µ–∫—É–Ω–¥)...');