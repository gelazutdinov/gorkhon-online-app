console.log('üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê');
console.log('='.repeat(40));

const path = require('path');
const fs = require('fs');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞
const serverPath = path.join(__dirname, 'server', 'quick-server.js');
console.log('üìÅ –ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É:', serverPath);

if (fs.existsSync(serverPath)) {
  console.log('‚úÖ –§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω');
  
  // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const content = fs.readFileSync(serverPath, 'utf8');
  console.log('üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', content.length, '—Å–∏–º–≤–æ–ª–æ–≤');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const checks = [
    { name: 'Express –∏–º–ø–æ—Ä—Ç', check: content.includes("require('express')") },
    { name: 'CORS –∏–º–ø–æ—Ä—Ç', check: content.includes("require('cors')") },
    { name: '–ü–æ—Ä—Ç 3001', check: content.includes('3001') },
    { name: 'Health endpoint', check: content.includes('/api/health') },
    { name: 'Login endpoint', check: content.includes('/api/auth/login') },
    { name: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', check: content.includes('smm@gelazutdinov.ru') }
  ];
  
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
  checks.forEach(check => {
    console.log(`${check.check ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
  
  const allPassed = checks.every(check => check.check);
  console.log(`\n${allPassed ? '‚úÖ' : '‚ùå'} –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allPassed ? 'OK' : 'FAIL'}`);
  
} else {
  console.log('‚ùå –§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –ù–ï –Ω–∞–π–¥–µ–Ω!');
}

console.log('\nüöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...');

const { spawn } = require('child_process');

const serverProcess = spawn('node', ['-c', serverPath]);

serverProcess.on('exit', (code) => {
  if (code === 0) {
    console.log('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    console.log('\nüî• –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
    const runProcess = spawn('node', [serverPath], {
      stdio: ['ignore', 'pipe', 'pipe'],
      cwd: path.join(__dirname, 'server')
    });
    
    runProcess.stdout.on('data', (data) => {
      console.log('üìù Server output:', data.toString().trim());
    });
    
    runProcess.stderr.on('data', (data) => {
      console.error('‚ùå Server error:', data.toString().trim());
    });
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      runProcess.kill('SIGTERM');
      console.log('üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      
      // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º endpoints
      testEndpoints();
    }, 5000);
    
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞! –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: ${code}`);
  }
});

serverProcess.stderr.on('data', (data) => {
  console.error('‚ùå Syntax error:', data.toString().trim());
});

async function testEndpoints() {
  console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS');
  console.log('='.repeat(40));
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testProcess = spawn('node', [serverPath], {
    stdio: ['ignore', 'pipe', 'pipe'],
    cwd: path.join(__dirname, 'server')
  });
  
  testProcess.stdout.on('data', (data) => {
    const output = data.toString().trim();
    console.log('üìù Server:', output);
    
    if (output.includes('–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢')) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      
      // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
      setTimeout(async () => {
        await runQuickTests();
        testProcess.kill('SIGTERM');
      }, 2000);
    }
  });
  
  testProcess.stderr.on('data', (data) => {
    console.error('‚ùå Server error:', data.toString().trim());
  });
}

async function runQuickTests() {
  const SERVER_URL = 'http://localhost:3001';
  
  console.log('\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health endpoint...');
  
  try {
    const response = await fetch(`${SERVER_URL}/api/health`);
    const data = await response.json();
    console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –û—Ç–≤–µ—Ç:', JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('‚ùå Health endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
  }
  
  console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞...');
  
  try {
    const response = await fetch(`${SERVER_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'smm@gelazutdinov.ru',
        password: 'admin123'
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      console.log('‚úÖ –õ–æ–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.data.user.name);
      console.log('üé´ –¢–æ–∫–µ–Ω:', data.data.token.substring(0, 20) + '...');
    } else {
      console.log('‚ùå –õ–æ–≥–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', error.message);
  }
  
  console.log('\n‚úÖ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}