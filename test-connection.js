#!/usr/bin/env node

// –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –°–ï–†–í–ï–†–£
const http = require('http');

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –°–ï–†–í–ï–†–£');
console.log('=' .repeat(50));

function testConnection() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3001,
      path: '/api/health',
      method: 'GET',
      timeout: 3000
    };

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(data);
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            console.log('üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            resolve(true);
          } catch (e) {
            console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
            console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', data);
            resolve(false);
          }
        } else {
          console.log('‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π');
          console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', data);
          resolve(false);
        }
      });
    });

    req.on('error', (err) => {
      console.log('üî¥ –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù!');
      console.log('‚ùå –û—à–∏–±–∫–∞:', err.message);
      console.log('');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      console.log('   2. –ü–æ—Ä—Ç 3001 –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º');
      console.log('   3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
      console.log('');
      console.log('üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
      console.log('   node start-server-now.js');
      console.log('   –∏–ª–∏');
      console.log('   node server/start-emergency-server.js');
      reject(err);
    });

    req.on('timeout', () => {
      console.log('‚è∞ TIMEOUT! –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      req.destroy();
      reject(new Error('Timeout'));
    });

    req.end();
  });
}

// –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
async function testLogin() {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({
      email: 'smm@gelazutdinov.ru',
      password: 'admin123'
    });

    const options = {
      hostname: 'localhost',
      port: 3001,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      },
      timeout: 3000
    };

    console.log('üîë –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–≥–∏–Ω...');

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        console.log(`üìä –°—Ç–∞—Ç—É—Å –ª–æ–≥–∏–Ω–∞: ${res.statusCode}`);
        try {
          const response = JSON.parse(data);
          if (res.statusCode === 200 && response.success) {
            console.log('‚úÖ –õ–æ–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', response.data.user.name);
            console.log('üé´ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', response.data.token ? '–î–∞' : '–ù–µ—Ç');
            resolve(true);
          } else {
            console.log('‚ùå –õ–æ–≥–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('üìÑ –û—Ç–≤–µ—Ç:', response);
            resolve(false);
          }
        } catch (e) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ª–æ–≥–∏–Ω–∞');
          console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', data);
          resolve(false);
        }
      });
    });

    req.on('error', (err) => {
      console.log('üî¥ –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', err.message);
      reject(err);
    });

    req.on('timeout', () => {
      console.log('‚è∞ Timeout –ª–æ–≥–∏–Ω–∞');
      req.destroy();
      reject(new Error('Login timeout'));
    });

    req.write(postData);
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
async function runTests() {
  try {
    console.log('–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint');
    const healthOk = await testConnection();
    
    if (!healthOk) {
      throw new Error('Health check failed');
    }

    console.log('');
    console.log('–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    const loginOk = await testLogin();

    if (!loginOk) {
      throw new Error('Login test failed');
    }

    console.log('');
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
    console.log('üü¢ –°–ï–†–í–ï–† –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ï–ù!');
    console.log('');
    console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞');
    console.log('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('      Email: smm@gelazutdinov.ru');
    console.log('      Password: admin123');
    console.log('   4. –ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏"');
    console.log('');
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ "Failed to fetch" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ—à–µ–Ω–∞!');

  } catch (error) {
    console.log('');
    console.log('üî¥ –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!');
    console.log('‚ùå –ü—Ä–∏—á–∏–Ω–∞:', error.message);
    console.log('');
    console.log('üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: node start-server-now.js');
    console.log('   2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥');
    console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞: node test-connection.js');
    process.exit(1);
  }
}

runTests();