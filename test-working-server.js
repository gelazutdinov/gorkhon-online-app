const https = require('http');

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ë–û–ß–ï–ì–û –°–ï–†–í–ï–†–ê');
console.log('===============================');

const BASE_URL = 'http://localhost:3001';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(method, path, data = null, token = null) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, BASE_URL);
    
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    if (token) {
      options.headers['Authorization'] = `Bearer ${token}`;
    }

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const jsonBody = JSON.parse(body);
          resolve({ status: res.statusCode, data: jsonBody });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

async function runTests() {
  let token = null;

  try {
    // 1. –¢–µ—Å—Ç health check
    console.log('1. üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...');
    const health = await makeRequest('GET', '/api/health');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${health.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, health.data);

    // 2. –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
    console.log('\n2. üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω...');
    const login = await makeRequest('POST', '/api/auth/login', {
      email: 'smm@gelazutdinov.ru',
      password: 'admin123'
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${login.status}`);
    console.log(`   –£—Å–ø–µ—Ö: ${login.data.success}`);
    
    if (login.data.success) {
      token = login.data.data.token;
      console.log(`   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 20)}...`);
    }

    // 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if (token) {
      console.log('\n3. üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...');
      const profile = await makeRequest('GET', '/api/auth/me', null, token);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${profile.status}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, profile.data.data?.user?.email);
    }

    // 4. –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    console.log('\n4. ‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω...');
    const badLogin = await makeRequest('POST', '/api/auth/login', {
      email: 'test@test.com',
      password: 'wrong'
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${badLogin.status}`);
    console.log(`   –û—à–∏–±–∫–∞: ${badLogin.data.error}`);

    // 5. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('\n5. üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
    const register = await makeRequest('POST', '/api/auth/register', {
      email: 'test@example.com',
      password: 'test123',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${register.status}`);
    console.log(`   –£—Å–ø–µ—Ö: ${register.data.success}`);

    console.log('\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
setTimeout(runTests, 2000);