const { spawn, exec } = require('child_process');
const path = require('path');
const util = require('util');

const execAsync = util.promisify(exec);

console.log('üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û –°–ï–†–í–ï–†–ê');
console.log('=' .repeat(50));

const SERVER_URL = 'http://localhost:3001';
const TEST_CREDENTIALS = {
  email: 'smm@gelazutdinov.ru',
  password: 'admin123'
};

let serverProcess = null;

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function curlTest(description, curlCommand) {
  console.log(`\n${description}`);
  console.log(`Command: ${curlCommand}`);
  console.log('-'.repeat(40));
  
  try {
    const { stdout, stderr } = await execAsync(curlCommand, { timeout: 10000 });
    if (stdout) {
      try {
        const jsonData = JSON.parse(stdout);
        console.log('‚úÖ Response:', JSON.stringify(jsonData, null, 2));
        return { success: true, data: jsonData };
      } catch {
        console.log('‚úÖ Response:', stdout);
        return { success: true, data: stdout };
      }
    }
    if (stderr) {
      console.error('‚ö†Ô∏è Stderr:', stderr);
    }
    return { success: true, data: stdout };
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    return { success: false, error: error.message };
  }
}

async function startServerInBackground() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...');
  
  return new Promise((resolve, reject) => {
    const serverPath = path.join(__dirname, 'server', 'quick-server.js');
    
    serverProcess = spawn('node', [serverPath], {
      stdio: ['ignore', 'pipe', 'pipe'],
      cwd: path.join(__dirname, 'server'),
      detached: false
    });
    
    let output = '';
    let hasStarted = false;
    
    serverProcess.stdout.on('data', (data) => {
      output += data.toString();
      const message = data.toString().trim();
      console.log('üìù Server:', message);
      
      if (message.includes('–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢') && !hasStarted) {
        hasStarted = true;
        resolve(true);
      }
    });
    
    serverProcess.stderr.on('data', (data) => {
      console.error('‚ùå Server error:', data.toString().trim());
    });
    
    serverProcess.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
      reject(error);
    });
    
    serverProcess.on('exit', (code) => {
      if (code !== 0 && code !== null) {
        console.log(`üìù –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
      }
    });
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    setTimeout(() => {
      if (!hasStarted) {
        reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥'));
      }
    }, 10000);
  });
}

function stopServer() {
  if (serverProcess) {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    if (process.platform === 'win32') {
      spawn('taskkill', ['/pid', serverProcess.pid, '/f', '/t']);
    } else {
      serverProcess.kill('SIGTERM');
      
      setTimeout(() => {
        if (serverProcess && !serverProcess.killed) {
          serverProcess.kill('SIGKILL');
        }
      }, 3000);
    }
  }
}

async function runAllTests() {
  let token = null;
  
  try {
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    await startServerInBackground();
    await delay(3000); // –î–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health endpoint
    const healthResult = await curlTest(
      'üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/health',
      `curl -s "${SERVER_URL}/api/health"`
    );
    
    // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
    const loginResult = await curlTest(
      'üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞',
      `curl -s -X POST "${SERVER_URL}/api/auth/login" -H "Content-Type: application/json" -d '{"email":"${TEST_CREDENTIALS.email}","password":"${TEST_CREDENTIALS.password}"}'`
    );
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ª–æ–≥–∏–Ω–∞
    if (loginResult.success && loginResult.data && typeof loginResult.data === 'object') {
      token = loginResult.data.data?.token;
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/auth/me —Å —Ç–æ–∫–µ–Ω–æ–º
    if (token) {
      await curlTest(
        'üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/auth/me',
        `curl -s -H "Authorization: Bearer ${token}" "${SERVER_URL}/api/auth/me"`
      );
    } else {
      console.log('\n‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç /api/auth/me');
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const timestamp = Date.now();
    await curlTest(
      'üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      `curl -s -X POST "${SERVER_URL}/api/auth/register" -H "Content-Type: application/json" -d '{"email":"test${timestamp}@test.com","password":"testpass123","name":"Test User"}'`
    );
    
    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ logout
    await curlTest(
      'üö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ logout',
      `curl -s -X POST "${SERVER_URL}/api/auth/logout" -H "Content-Type: application/json"`
    );
    
    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 404
    await curlTest(
      'üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 404 endpoint',
      `curl -s "${SERVER_URL}/api/nonexistent"`
    );
    
    // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    await curlTest(
      'üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞',
      `curl -s -X POST "${SERVER_URL}/api/auth/login" -H "Content-Type: application/json" -d '{"email":"wrong@email.com","password":"wrongpass"}'`
    );
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    stopServer();
    await delay(2000);
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(50));
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ endpoints:');
    console.log('   - GET  /api/health');
    console.log('   - POST /api/auth/login');
    console.log('   - GET  /api/auth/me');
    console.log('   - POST /api/auth/register');
    console.log('   - POST /api/auth/logout');
    console.log('   - GET  /api/nonexistent (404 test)');
    console.log('='.repeat(50));
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
  stopServer();
  process.exit(1);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  stopServer();
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().catch(error => {
  console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  stopServer();
  process.exit(1);
});