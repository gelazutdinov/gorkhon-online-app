#!/usr/bin/env node

const { execSync, spawn } = require('child_process');
const fs = require('fs');

console.log('üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê\n');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º tsx
try {
  console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º tsx...');
  const tsx = execSync('which tsx 2>/dev/null || echo "not found"', { encoding: 'utf8' }).trim();
  if (tsx === 'not found') {
    console.log('   ‚ùå tsx –Ω–µ –Ω–∞–π–¥–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ');
    console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º npx tsx...');
    const tsxVersion = execSync('npx tsx --version', { encoding: 'utf8', timeout: 5000 }).trim();
    console.log(`   ‚úÖ tsx —á–µ—Ä–µ–∑ npx: ${tsxVersion}`);
  } else {
    console.log(`   ‚úÖ tsx –Ω–∞–π–¥–µ–Ω: ${tsx}`);
  }
} catch (error) {
  console.log(`   ‚ùå –û—à–∏–±–∫–∞ tsx: ${error.message}`);
}

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã...');
const files = ['server/src/app.ts', 'server/.env'];
files.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`   ‚úÖ ${file}`);
  } else {
    console.log(`   ‚ùå ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 3001...');
const net = require('net');
const server = net.createServer();

server.listen(3001, () => {
  console.log('   ‚úÖ –ü–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω');
  server.close();
  
  // 4. –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
  console.log('\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
  console.log('   –ö–æ–º–∞–Ω–¥–∞: cd server && npx tsx src/app.ts');
  console.log('   ' + '-'.repeat(40));
  
  const proc = spawn('npx', ['tsx', 'src/app.ts'], {
    cwd: 'server',
    stdio: 'inherit'
  });
  
  let killed = false;
  
  proc.on('error', (error) => {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  });
  
  setTimeout(() => {
    if (!killed) {
      console.log('\n   ‚è∞ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç...');
      proc.kill('SIGTERM');
      killed = true;
      
      setTimeout(() => {
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        process.exit(0);
      }, 1000);
    }
  }, 5000);
  
}).on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.log('   ‚ö†Ô∏è –ü–æ—Ä—Ç 3001 –∑–∞–Ω—è—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω)');
  } else {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ä—Ç–∞: ${err.message}`);
  }
});