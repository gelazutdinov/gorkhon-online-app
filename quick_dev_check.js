const { spawn } = require('child_process');

console.log('üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –†–ê–ó–†–ê–ë–û–¢–ö–ò\n');

// –ü—Ä–æ–≤–µ—Ä–∏–º package.json
const fs = require('fs');
let pkg;
try {
    pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    console.log('‚úÖ package.json –Ω–∞–π–¥–µ–Ω');
    console.log(`üì¶ –ü—Ä–æ–µ–∫—Ç: ${pkg.name}`);
    console.log(`üîß –°–∫—Ä–∏–ø—Ç dev: ${pkg.scripts?.dev || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
    process.exit(1);
}

if (!pkg.scripts?.dev) {
    console.log('‚ùå –°–∫—Ä–∏–ø—Ç dev –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ package.json');
    process.exit(1);
}

console.log('\nüîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...\n');

// –ó–∞–ø—É—Å–∫ npm run dev —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º stdio
const devServer = spawn('npm', ['run', 'dev'], {
    stdio: 'inherit' // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –≤–≤–æ–¥/–≤—ã–≤–æ–¥ –≤ —Ç–µ–∫—É—â–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª
});

console.log(`\nüìä PID –ø—Ä–æ—Ü–µ—Å—Å–∞: ${devServer.pid}`);
console.log('‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
console.log('üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
    console.log('\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    devServer.kill('SIGINT');
    setTimeout(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
    }, 1000);
});

devServer.on('close', (code) => {
    console.log(`\nüìä –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
    process.exit(code);
});

devServer.on('error', (error) => {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
    process.exit(1);
});