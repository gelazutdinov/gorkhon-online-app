import { spawn } from 'child_process';

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...\n');

const serverProcess = spawn('tsx', ['server/src/app.ts'], {
  stdio: 'pipe'
});

let hasError = false;
let output = '';

serverProcess.stdout.on('data', (data) => {
  const text = data.toString();
  output += text;
  console.log('üìã Output:', text.trim());
});

serverProcess.stderr.on('data', (data) => {
  const text = data.toString();
  output += text;
  console.error('‚ùå Error:', text.trim());
  hasError = true;
});

serverProcess.on('close', (code) => {
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:`);
  console.log(`‚Ä¢ –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${code}`);
  console.log(`‚Ä¢ –ï—Å—Ç—å –æ—à–∏–±–∫–∏: ${hasError ? '–î–∞' : '–ù–µ—Ç'}`);
  
  if (hasError) {
    console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ');
    console.log('üîß –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...\n');
    testNewServer();
  } else {
    console.log('\n‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    process.exit(0);
  }
});

setTimeout(() => {
  if (!hasError) {
    console.log('\n‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ –∑–∞ 5 —Å–µ–∫—É–Ω–¥');
    serverProcess.kill();
  }
}, 5000);

function testNewServer() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...\n');
  
  const newServerProcess = spawn('node', ['server/test-simple-server.js'], {
    stdio: 'inherit'
  });

  newServerProcess.on('close', (code) => {
    console.log(`\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º ${code}`);
    process.exit(0);
  });
}