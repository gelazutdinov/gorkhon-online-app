const { execSync, spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ TypeScript —Å–µ—Ä–≤–µ—Ä–∞');
console.log('==========================================\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tsx
console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å tsx...');
try {
  const tsxVersion = execSync('npx tsx --version', { encoding: 'utf8', timeout: 10000 });
  console.log(`‚úÖ tsx –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–µ—Ä—Å–∏—è: ${tsxVersion.trim()}\n`);
} catch (error) {
  console.error('‚ùå tsx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...');
const serverDir = path.join(__dirname, 'server');
const appFile = path.join(serverDir, 'src', 'app.ts');

try {
  require('fs').accessSync(serverDir);
  console.log('‚úÖ –ü–∞–ø–∫–∞ server –Ω–∞–π–¥–µ–Ω–∞');
  
  require('fs').accessSync(appFile);
  console.log('‚úÖ –§–∞–π–ª src/app.ts –Ω–∞–π–¥–µ–Ω\n');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
console.log('3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: cd server && npx tsx src/app.ts');
console.log('==========================================');

const serverProcess = spawn('npx', ['tsx', 'src/app.ts'], {
  cwd: serverDir,
  stdio: ['pipe', 'pipe', 'pipe']
});

let stdout = '';
let stderr = '';
let serverStarted = false;

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º stdout
serverProcess.stdout.on('data', (data) => {
  const text = data.toString();
  stdout += text;
  console.log(`[OUT] ${text.trim()}`);
  
  if (text.includes('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É')) {
    serverStarted = true;
  }
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º stderr
serverProcess.stderr.on('data', (data) => {
  const text = data.toString();
  stderr += text;
  console.log(`[ERR] ${text.trim()}`);
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
serverProcess.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error.message);
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ 8 —Å–µ–∫—É–Ω–¥
const timeout = setTimeout(() => {
  console.log('\n‚è∞ –¢–∞–π–º–∞—É—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  serverProcess.kill('SIGTERM');
  
  setTimeout(() => {
    serverProcess.kill('SIGKILL');
  }, 2000);
}, 8000);

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
serverProcess.on('close', (code, signal) => {
  clearTimeout(timeout);
  
  console.log('\n==========================================');
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('==========================================');
  
  console.log(`üîÑ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω - –ö–æ–¥: ${code}, –°–∏–≥–Ω–∞–ª: ${signal}`);
  
  if (serverStarted) {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –£–°–ü–ï–®–ù–û –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!');
    console.log('üéØ –°–¢–ê–¢–£–°: –£–°–ü–ï–•');
  } else if (signal === 'SIGTERM') {
    console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è)');
    console.log('üéØ –°–¢–ê–¢–£–°: –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•');
  } else {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –ù–ï –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('üéØ –°–¢–ê–¢–£–°: –û–®–ò–ë–ö–ê');
  }
  
  console.log('\nüìù –ü–û–õ–ù–´–ï –õ–û–ì–ò:');
  console.log('--- STDOUT ---');
  console.log(stdout || '(–ø—É—Å—Ç–æ)');
  
  if (stderr.trim()) {
    console.log('\n--- STDERR ---');
    console.log(stderr);
  }
  
  console.log('\n==========================================');
  
  // –í—ã—Ö–æ–¥–∏–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  if (serverStarted || signal === 'SIGTERM') {
    process.exit(0);
  } else {
    process.exit(1);
  }
});

console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ 8 —Å–µ–∫—É–Ω–¥)...');