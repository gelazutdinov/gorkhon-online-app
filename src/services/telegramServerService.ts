// üöÄ TELEGRAM SERVER SERVICE
// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

class TelegramServerService {
  private serverUrl: string;
  private isConfigured: boolean = false;

  constructor() {
    // –í production –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞
    this.serverUrl = process.env.NODE_ENV === 'production' 
      ? 'https://your-telegram-server.vercel.app'  // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
      : 'http://localhost:3001';
  }

  // üîß –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê
  async configureBotServer(botToken: string): Promise<{success: boolean, botInfo?: any, subscribersCount?: number, error?: string}> {
    try {
      const response = await fetch(`${this.serverUrl}/api/bot/config`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token: botToken }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        this.isConfigured = true;
        localStorage.setItem('telegram_server_configured', 'true');
        localStorage.setItem('telegram_bot_token', botToken);
        
        return {
          success: true,
          botInfo: data.botInfo,
          subscribersCount: data.subscribersCount
        };
      } else {
        return {
          success: false,
          error: data.error || '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞'
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
      };
    }
  }

  // üì§ –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
  async sendNotification(title: string, message: string, type: string = 'info'): Promise<{success: boolean, sent?: number, total?: number, error?: string}> {
    if (!this.isConfigured) {
      return {
        success: false,
        error: '–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      };
    }

    try {
      const response = await fetch(`${this.serverUrl}/api/notifications/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ title, message, type }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        return {
          success: true,
          sent: data.sent,
          total: data.total
        };
      } else {
        return {
          success: false,
          error: data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
      };
    }
  }

  // üë• –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–î–ü–ò–°–ß–ò–ö–û–í
  async getSubscribersStats(): Promise<{count: number, error?: string}> {
    try {
      const response = await fetch(`${this.serverUrl}/api/subscribers`);
      const data = await response.json();

      if (response.ok) {
        return { count: data.count };
      } else {
        return { count: 0, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return { count: 0, error: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' };
    }
  }

  // üíä –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ï–†–ê
  async checkHealth(): Promise<{isOnline: boolean, subscribers?: number, botConfigured?: boolean}> {
    try {
      const response = await fetch(`${this.serverUrl}/health`);
      const data = await response.json();

      if (response.ok && data.status === 'ok') {
        this.isConfigured = data.botConfigured;
        return {
          isOnline: true,
          subscribers: data.subscribers,
          botConfigured: data.botConfigured
        };
      } else {
        return { isOnline: false };
      }
    } catch (error) {
      console.error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      return { isOnline: false };
    }
  }

  // üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê
  isServerConfigured(): boolean {
    return this.isConfigured || localStorage.getItem('telegram_server_configured') === 'true';
  }

  // üóëÔ∏è –°–ë–†–û–° –ù–ê–°–¢–†–û–ï–ö
  resetConfiguration(): void {
    this.isConfigured = false;
    localStorage.removeItem('telegram_server_configured');
    localStorage.removeItem('telegram_bot_token');
  }

  // üîó –ü–û–õ–£–ß–ï–ù–ò–ï –°–°–´–õ–ö–ò –ù–ê –ë–û–¢–ê
  getBotLink(): string {
    const botToken = localStorage.getItem('telegram_bot_token');
    if (!botToken) return '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞ (—á–∞—Å—Ç—å –¥–æ :)
    const botName = botToken.split(':')[0];
    return `https://t.me/bot${botName}`;
  }

  // üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
  getSubscriptionInstructions(): string {
    const botLink = this.getBotLink();
    return `
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã:
1. –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É: ${botLink}
2. –ù–∞–∂–∞—Ç—å "–°—Ç–∞—Ä—Ç" –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
4. –û–Ω–∏ –Ω–∞—á–Ω—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    `.trim();
  }
}

// üåü –≠–ö–°–ü–û–†–¢ –°–ò–ù–ì–õ–¢–û–ù–ê
export const telegramServerService = new TelegramServerService();
export default telegramServerService;