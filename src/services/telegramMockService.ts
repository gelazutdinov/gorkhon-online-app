// üé≠ MOCK SERVICE –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç

export interface TelegramMessage {
  title: string;
  message: string;
  type: 'update' | 'feature' | 'news' | 'important';
}

class TelegramMockService {
  private isConfigured: boolean = false;
  private subscribersCount: number = 0;

  constructor() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å localStorage –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    this.isConfigured = localStorage.getItem('telegram_mock_configured') === 'true';
    this.subscribersCount = parseInt(localStorage.getItem('telegram_subscribers_count') || '0');
  }

  // üîß –ò–ú–ò–¢–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê
  async configureBotServer(botToken: string): Promise<{success: boolean, botInfo?: any, subscribersCount?: number, error?: string}> {
    // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–æ–∫–µ–Ω
    if (!botToken || botToken.trim().length < 5) {
      return {
        success: false,
        error: '–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456:ABC-DEF)'
      };
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1500));

    this.isConfigured = true;
    this.subscribersCount = Math.floor(Math.random() * 25) + 5; // 5-30 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    
    localStorage.setItem('telegram_mock_configured', 'true');
    localStorage.setItem('telegram_bot_token', botToken);
    localStorage.setItem('telegram_subscribers_count', this.subscribersCount.toString());

    return {
      success: true,
      botInfo: {
        username: `bot_${botToken.split(':')[0]}`,
        first_name: 'Your Bot',
        id: parseInt(botToken.split(':')[0])
      },
      subscribersCount: this.subscribersCount
    };
  }

  // üì§ –ò–ú–ò–¢–ê–¶–ò–Ø –ú–ê–°–°–û–í–û–ô –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
  async sendBulkNotification(notificationData: TelegramMessage): Promise<{success: number, errors: string[]}> {
    if (!this.isServerConfigured()) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –¥–µ–º–æ
      await this.autoConfigureForDemo();
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));

    let total = parseInt(localStorage.getItem('telegram_subscribers_count') || '0');
    
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –¥–µ–º–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (total === 0) {
      total = Math.floor(Math.random() * 25) + 15; // 15-40 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      localStorage.setItem('telegram_subscribers_count', total.toString());
    }
    const sent = Math.floor(total * (0.85 + Math.random() * 0.15)); // 85-100% –¥–æ—Å—Ç–∞–≤–∫–∞
    const failed = total - sent;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    const notification = {
      id: Date.now().toString(),
      title: notificationData.title,
      message: notificationData.message,
      type: notificationData.type,
      timestamp: new Date().toISOString(),
      sent,
      total
    };

    const history = JSON.parse(localStorage.getItem('telegram_notifications_history') || '[]');
    history.unshift(notification);
    localStorage.setItem('telegram_notifications_history', JSON.stringify(history.slice(0, 50))); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50

    const errors = failed > 0 ? [`${failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`] : [];

    return {
      success: sent,
      errors
    };
  }

  // üì§ –ò–ú–ò–¢–ê–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
  async sendNotification(title: string, message: string, type: string = 'info'): Promise<{success: boolean, sent?: number, total?: number, error?: string}> {
    if (!this.isServerConfigured()) {
      return {
        success: false,
        error: '–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      };
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));

    let total = parseInt(localStorage.getItem('telegram_subscribers_count') || '0');
    
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –¥–µ–º–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (total === 0) {
      total = Math.floor(Math.random() * 25) + 15; // 15-40 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      localStorage.setItem('telegram_subscribers_count', total.toString());
    }
    
    const sent = Math.floor(total * (0.85 + Math.random() * 0.15)); // 85-100% –¥–æ—Å—Ç–∞–≤–∫–∞

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    const notification = {
      id: Date.now().toString(),
      title,
      message,
      type,
      timestamp: new Date().toISOString(),
      sent,
      total
    };

    const history = JSON.parse(localStorage.getItem('telegram_notifications_history') || '[]');
    history.unshift(notification);
    localStorage.setItem('telegram_notifications_history', JSON.stringify(history.slice(0, 50))); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50

    return {
      success: true,
      sent,
      total
    };
  }

  // üë• –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–î–ü–ò–°–ß–ò–ö–û–í
  async getSubscribersStats(): Promise<{count: number, error?: string}> {
    const saved = localStorage.getItem('telegram_subscribers_count');
    return { 
      count: saved ? parseInt(saved) : this.subscribersCount 
    };
  }

  // üíä –ò–ú–ò–¢–ê–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ï–†–ê
  async checkHealth(): Promise<{isOnline: boolean, subscribers?: number, botConfigured?: boolean}> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const configured = localStorage.getItem('telegram_mock_configured') === 'true';
    const subscribers = localStorage.getItem('telegram_subscribers_count');
    
    return {
      isOnline: true, // Mock –≤—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω
      subscribers: subscribers ? parseInt(subscribers) : 0,
      botConfigured: configured
    };
  }

  // üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê
  isServerConfigured(): boolean {
    return localStorage.getItem('telegram_mock_configured') === 'true';
  }

  // üóëÔ∏è –°–ë–†–û–° –ù–ê–°–¢–†–û–ï–ö
  resetConfiguration(): void {
    this.isConfigured = false;
    this.subscribersCount = 0;
    localStorage.removeItem('telegram_mock_configured');
    localStorage.removeItem('telegram_bot_token');
    localStorage.removeItem('telegram_subscribers_count');
  }

  // üîó –ü–û–õ–£–ß–ï–ù–ò–ï –°–°–´–õ–ö–ò –ù–ê –ë–û–¢–ê
  getBotLink(): string {
    const botToken = localStorage.getItem('telegram_bot_token');
    if (!botToken) return '';
    
    const botId = botToken.split(':')[0];
    return `https://t.me/bot${botId}`;
  }

  // üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
  getSubscriptionInstructions(): string {
    const botLink = this.getBotLink();
    return `
üé≠ –î–ï–ú–û –†–ï–ñ–ò–ú - —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã:
1. –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É: ${botLink || '[—Å–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω]'}
2. –ù–∞–∂–∞—Ç—å "–°—Ç–∞—Ä—Ç" –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
4. –û–Ω–∏ –Ω–∞—á–Ω—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è

‚ö†Ô∏è –ß—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∞, —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ deployment-guide.md
    `.trim();
  }

  // üìö –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
  getNotificationsHistory(): any[] {
    return JSON.parse(localStorage.getItem('telegram_notifications_history') || '[]');
  }

  // üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
  async autoConfigureForDemo(): Promise<void> {
    if (!this.isServerConfigured()) {
      console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –¥–ª—è –¥–µ–º–æ...');
      await this.configureBotServer('demo123:ABCDEF-demo-token-for-testing');
    }
  }
}

// üåü –≠–ö–°–ü–û–†–¢ –°–ò–ù–ì–õ–¢–û–ù–ê
export const telegramMockService = new TelegramMockService();
export default telegramMockService;