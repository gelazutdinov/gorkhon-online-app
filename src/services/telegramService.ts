interface TelegramMessage {
  title: string;
  message: string;
  type: 'update' | 'feature' | 'news' | 'important';
}

interface TelegramResponse {
  ok: boolean;
  result?: any;
  error?: string;
  description?: string;
}

interface BulkSendResult {
  success: number;
  failed: number;
  errors: string[];
}

class TelegramService {
  private botToken: string | null = null;
  private apiUrl = 'https://api.telegram.org/bot';

  constructor() {
    this.loadConfig();
  }

  private loadConfig() {
    try {
      const config = localStorage.getItem('telegramBotConfig');
      if (config) {
        const parsed = JSON.parse(config);
        this.botToken = parsed.botToken;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    }
  }

  public setConfig(botToken: string) {
    this.botToken = botToken;
    
    try {
      localStorage.setItem('telegramBotConfig', JSON.stringify({
        botToken
      }));
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      this.startSubscribersCollection();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    }
  }

  public isConfigured(): boolean {
    return Boolean(this.botToken);
  }

  private async startSubscribersCollection() {
    const { telegramSubscribersService } = await import('./telegramSubscribersService');
    if (this.botToken) {
      await telegramSubscribersService.startPolling(this.botToken);
    }
  }

  private formatMessage(notification: TelegramMessage): string {
    const typeEmojis = {
      update: 'üîÑ',
      feature: '‚ú®',
      news: 'üì∞',
      important: '‚ö†Ô∏è'
    };

    const typeLabels = {
      update: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
      feature: '–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è',
      news: '–ù–æ–≤–æ—Å—Ç–∏',
      important: '–í–∞–∂–Ω–æ–µ'
    };

    const emoji = typeEmojis[notification.type];
    const label = typeLabels[notification.type];
    
    return `${emoji} <b>${label}: ${notification.title}</b>\n\n${notification.message}\n\n<i>–ì–æ—Ä—Ö–æ–Ω.Online - —Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å–µ–ª–∞</i>\nüîó https://gorkhon.online`;
  }

  public async checkBotStatus(): Promise<boolean> {
    if (!this.botToken) {
      return false;
    }

    try {
      const response = await fetch(`${this.apiUrl}${this.botToken}/getMe`);
      const data: TelegramResponse = await response.json();
      return data.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error);
      return false;
    }
  }



  public async sendBulkNotification(notification: TelegramMessage): Promise<BulkSendResult> {
    if (!this.isConfigured()) {
      console.error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω');
      return { success: 0, failed: 0, errors: ['–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'] };
    }

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É:', notification.title);

    const { telegramSubscribersService } = await import('./telegramSubscribersService');
    const subscribers = telegramSubscribersService.getSubscribers();

    if (subscribers.length === 0) {
      return { 
        success: 0, 
        failed: 0, 
        errors: ['–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.'] 
      };
    }

    let success = 0;
    let failed = 0;
    const errors: string[] = [];
    const message = this.formatMessage(notification);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 50–º—Å (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API)
    for (const subscriber of subscribers) {
      try {
        const response = await fetch(`${this.apiUrl}${this.botToken}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: subscriber.id,
            text: message,
            parse_mode: 'HTML',
            disable_web_page_preview: false
          })
        });

        const data: TelegramResponse = await response.json();
        
        if (data.ok) {
          success++;
        } else {
          failed++;
          errors.push(`${subscriber.first_name}: ${data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 50));

      } catch (error) {
        failed++;
        errors.push(`${subscriber.first_name}: ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'}`);
      }
    }

    return { success, failed, errors };
  }

  public async getSubscribersCount(): Promise<number> {
    if (!this.isConfigured()) {
      return 0;
    }

    try {
      const { telegramSubscribersService } = await import('./telegramSubscribersService');
      return telegramSubscribersService.getSubscribersCount();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', error);
      return 0;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramService = new TelegramService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { TelegramMessage, TelegramResponse, BulkSendResult };