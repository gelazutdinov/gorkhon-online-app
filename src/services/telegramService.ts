interface TelegramMessage {
  title: string;
  message: string;
  type: 'update' | 'feature' | 'news' | 'important';
}

interface TelegramResponse {
  ok: boolean;
  result?: any;
  error?: string;
  description?: string;
}

interface BulkSendResult {
  success: number;
  failed: number;
  errors: string[];
}

class TelegramService {
  private botToken: string | null = null;
  private apiUrl = 'https://api.telegram.org/bot';

  constructor() {
    this.loadConfig();
  }

  private loadConfig() {
    try {
      const config = localStorage.getItem('telegramBotConfig');
      if (config) {
        const parsed = JSON.parse(config);
        this.botToken = parsed.botToken;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    }
  }

  public setConfig(botToken: string) {
    this.botToken = botToken;
    
    try {
      localStorage.setItem('telegramBotConfig', JSON.stringify({
        botToken
      }));
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      this.startSubscribersCollection();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    }
  }

  public isConfigured(): boolean {
    return Boolean(this.botToken);
  }

  private async startSubscribersCollection() {
    const { telegramSubscribersService } = await import('./telegramSubscribersService');
    if (this.botToken) {
      await telegramSubscribersService.startPolling(this.botToken);
    }
  }

  private formatMessage(notification: TelegramMessage): string {
    const typeEmojis = {
      update: 'üîÑ',
      feature: '‚ú®',
      news: 'üì∞',
      important: '‚ö†Ô∏è'
    };

    const typeLabels = {
      update: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
      feature: '–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è',
      news: '–ù–æ–≤–æ—Å—Ç–∏',
      important: '–í–∞–∂–Ω–æ–µ'
    };

    const emoji = typeEmojis[notification.type];
    const label = typeLabels[notification.type];
    
    return `${emoji} <b>${label}: ${notification.title}</b>\n\n${notification.message}\n\n<i>–ì–æ—Ä—Ö–æ–Ω.Online - —Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å–µ–ª–∞</i>\nüîó https://gorkhon.online`;
  }

  public async checkBotStatus(): Promise<boolean> {
    if (!this.botToken) {
      return false;
    }

    try {
      const response = await fetch(`${this.apiUrl}${this.botToken}/getMe`);
      const data: TelegramResponse = await response.json();
      return data.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error);
      return false;
    }
  }



  public async sendBulkNotification(notification: TelegramMessage): Promise<BulkSendResult> {
    if (!this.isConfigured()) {
      alert('‚ùå Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
      return { success: 0, failed: 0, errors: ['–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'] };
    }

    // ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram API –∏–∑-–∑–∞ CORS
    // –î–ª—è –†–ï–ê–õ–¨–ù–û–ô —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    // 1. –°–µ—Ä–≤–µ—Ä–Ω—ã–π backend
    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª (–≤–º–µ—Å—Ç–æ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    // 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Telegram Web App

    alert(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞!

üö´ –ü—Ä–æ–±–ª–µ–º–∞: CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram API

‚úÖ –†–ï–®–ï–ù–ò–Ø:
1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—É–¥–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π backend 
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram Web App

–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–µ—Ä–µ–¥–µ–ª–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª?`);

    return { 
      success: 0, 
      failed: 1, 
      errors: ['CORS: –ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram API. –ù—É–∂–µ–Ω backend –∏–ª–∏ –∫–∞–Ω–∞–ª.'] 
    };
  }

  public async getSubscribersCount(): Promise<number> {
    if (!this.isConfigured()) {
      return 0;
    }

    try {
      const { telegramSubscribersService } = await import('./telegramSubscribersService');
      return telegramSubscribersService.getSubscribersCount();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', error);
      return 0;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramService = new TelegramService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { TelegramMessage, TelegramResponse, BulkSendResult };