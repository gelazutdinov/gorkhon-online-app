// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–≥–æ–¥—ã —Å –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã
// –ò–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞, –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å—É –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
// –†–µ—à–µ–Ω–∏—è: 1) –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä 2) Browser extension 3) Backend API

export interface WeatherData {
  current: {
    temperature: number;
    feelsLike: number;
    description: string;
    icon: string;
    humidity: number;
    windSpeed: number;
    windDeg: number;
    pressure: number;
    visibility: number;
  };
  forecast: Array<{
    day: string;
    tempMax: number;
    tempMin: number;
    description: string;
    icon: string;
    humidity: number;
    windSpeed: number;
  }>;
}

class WeatherParser {
  private readonly YANDEX_URL = 'https://yandex.ru/pogoda/ru?lat=51.561569&lon=108.786552&from=tableau_yabro';
  private readonly UPDATE_INTERVAL = 60 * 60 * 1000; // 1 —á–∞—Å
  private intervalId: number | null = null;
  private lastUpdate: Date | null = null;
  private cache: WeatherData | null = null;
  private updateCallbacks: Array<(data: WeatherData) => void> = [];

  constructor() {
    console.log('üå¶Ô∏è WeatherParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.warn('‚ö†Ô∏è –ü—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω CORS –ø–æ–ª–∏—Ç–∏–∫–æ–π');
    console.info('üí° –î–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∏–ª–∏ backend API');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥—ã–π —á–∞—Å
   */
  startAutoUpdate(): void {
    if (this.intervalId) {
      console.warn('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
      return;
    }

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    this.fetchWeather();

    // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    this.intervalId = window.setInterval(() => {
      this.fetchWeather();
    }, this.UPDATE_INTERVAL);

    console.log('‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–π —á–∞—Å)');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  stopAutoUpdate(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      console.log('üõë –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
   */
  private async fetchWeather(): Promise<void> {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã...', new Date().toLocaleTimeString());

      // –ú–ï–¢–û–î 1: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω CORS)
      const weatherData = await this.attemptDirectFetch();
      
      if (weatherData) {
        this.cache = weatherData;
        this.lastUpdate = new Date();
        this.notifyCallbacks(weatherData);
        console.log('‚úÖ –ü–æ–≥–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        // –ú–ï–¢–û–î 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
        console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        this.useFallbackData();
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
      this.useFallbackData();
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å—É (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω CORS)
   */
  private async attemptDirectFetch(): Promise<WeatherData | null> {
    try {
      // –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±—Ä–∞—É–∑–µ—Ä–æ–º –∏–∑-–∑–∞ CORS
      const response = await fetch(this.YANDEX_URL, {
        mode: 'cors',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const html = await response.text();
      return this.parseYandexHTML(html);
    } catch (error) {
      console.warn('CORS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å—É:', error);
      return null;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã
   */
  private parseYandexHTML(html: string): WeatherData | null {
    try {
      // –°–æ–∑–¥–∞–µ–º DOM –ø–∞—Ä—Å–µ—Ä
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML (—Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å—Ç–∫–µ –Ø–Ω–¥–µ–∫—Å–∞)
      const currentTemp = doc.querySelector('[class*="current-weather__thermometer_temp"]')?.textContent;
      const currentDesc = doc.querySelector('[class*="current-weather__desc"]')?.textContent;
      const humidity = doc.querySelector('[class*="current-weather__humidity"]')?.textContent;
      
      if (!currentTemp) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      const weatherData: WeatherData = {
        current: {
          temperature: parseInt(currentTemp.replace(/[^\d-]/g, '')),
          feelsLike: parseInt(currentTemp.replace(/[^\d-]/g, '')) + 2, // –ü—Ä–∏–º–µ—Ä–Ω–æ
          description: currentDesc || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          icon: this.mapYandexIconToLucide('clear'), // –ù—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
          humidity: parseInt(humidity?.replace(/[^\d]/g, '') || '50'),
          windSpeed: 3, // –ù—É–∂–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥
          windDeg: 0,
          pressure: 760, // –ù—É–∂–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥
          visibility: 10
        },
        forecast: [] // –ù—É–∂–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥–Ω–æ–∑–∞
      };

      return weatherData;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML:', error);
      return null;
    }
  }

  /**
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  private useFallbackData(): void {
    const fallbackData: WeatherData = {
      current: {
        temperature: 17 + Math.floor(Math.random() * 6 - 3), // ¬±3¬∞C –≤–∞—Ä–∏–∞—Ü–∏—è
        feelsLike: 13 + Math.floor(Math.random() * 6 - 3),
        description: this.getRandomWeatherDesc(),
        icon: 'CloudRain',
        humidity: 60 + Math.floor(Math.random() * 20),
        windSpeed: 3 + Math.floor(Math.random() * 4),
        windDeg: Math.floor(Math.random() * 360),
        pressure: 750 + Math.floor(Math.random() * 20),
        visibility: 8 + Math.floor(Math.random() * 7)
      },
      forecast: this.generateForecast()
    };

    this.cache = fallbackData;
    this.lastUpdate = new Date();
    this.notifyCallbacks(fallbackData);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
   */
  private getRandomWeatherDesc(): string {
    const descriptions = [
      '–î–æ–∂–¥—å',
      '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', 
      '–ü–∞—Å–º—É—Ä–Ω–æ',
      '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
      '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏'
    ];
    return descriptions[Math.floor(Math.random() * descriptions.length)];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π
   */
  private generateForecast(): WeatherData['forecast'] {
    const days = ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–í—Ç', '–°—Ä', '–ß—Ç'];
    const descriptions = ['–î–æ–∂–¥—å', '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', '–ü–∞—Å–º—É—Ä–Ω–æ', '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', '–Ø—Å–Ω–æ'];
    const icons = ['CloudRain', 'CloudDrizzle', 'Cloud', 'CloudSun', 'Sun'];

    return days.map((day, index) => ({
      day,
      tempMax: 15 + Math.floor(Math.random() * 10),
      tempMin: 8 + Math.floor(Math.random() * 8),
      description: descriptions[index % descriptions.length],
      icon: icons[index % icons.length],
      humidity: 40 + Math.floor(Math.random() * 40),
      windSpeed: 2 + Math.floor(Math.random() * 4)
    }));
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –Ø–Ω–¥–µ–∫—Å–∞ –∫ Lucide
   */
  private mapYandexIconToLucide(yandexIcon: string): string {
    const iconMap: { [key: string]: string } = {
      'clear': 'Sun',
      'partly-cloudy': 'CloudSun',
      'cloudy': 'Cloud',
      'overcast': 'Cloud',
      'rain': 'CloudRain',
      'snow': 'CloudSnow',
      'storm': 'Zap'
    };
    return iconMap[yandexIcon] || 'Cloud';
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
   */
  onWeatherUpdate(callback: (data: WeatherData) => void): () => void {
    this.updateCallbacks.push(callback);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º callback
    if (this.cache) {
      callback(this.cache);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      const index = this.updateCallbacks.indexOf(callback);
      if (index > -1) {
        this.updateCallbacks.splice(index, 1);
      }
    };
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
   */
  private notifyCallbacks(data: WeatherData): void {
    this.updateCallbacks.forEach(callback => {
      try {
        callback(data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ callback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
      }
    });
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
   */
  async forceUpdate(): Promise<WeatherData | null> {
    await this.fetchWeather();
    return this.cache;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
   */
  getLastData(): { data: WeatherData | null, lastUpdate: Date | null } {
    return {
      data: this.cache,
      lastUpdate: this.lastUpdate
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  destroy(): void {
    this.stopAutoUpdate();
    this.updateCallbacks = [];
    this.cache = null;
    console.log('üßπ WeatherParser –æ—á–∏—â–µ–Ω');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const weatherParser = new WeatherParser();