// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é web_fetch –∏–∑ —Å—Ä–µ–¥—ã
declare const web_fetch: (url: string, prompt: string) => Promise<string>;

export interface WeatherSource {
  name: string;
  url: string;
  prompt: string;
  priority: number;
  isActive: boolean;
}

export interface WeatherData {
  source: string;
  timestamp: Date;
  current: {
    temperature: number;
    feelsLike: number;
    description: string;
    humidity: number;
    windSpeed: number;
    pressure?: number;
    visibility?: number;
  };
  forecast: Array<{
    date: string;
    day: string;
    temperature: { min: number; max: number };
    description: string;
    humidity: number;
    windSpeed: number;
  }>;
  reliability: number; // 0-100 –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
}

class WeatherMonitor {
  private sources: WeatherSource[] = [
    {
      name: '–Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞',
      url: 'https://yandex.ru/pogoda/ru/zabaykalsky-kray/gorkhon',
      prompt: `–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ –ì–æ—Ä—Ö–æ–Ω–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã:
        - –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
        - –û–ø–∏—Å–∞–Ω–∏–µ (–¥–æ–∂–¥—å, —Å–Ω–µ–≥, —è—Å–Ω–æ, –æ–±–ª–∞—á–Ω–æ)
        - –í–ª–∞–∂–Ω–æ—Å—Ç—å %, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –º/—Å, –¥–∞–≤–ª–µ–Ω–∏–µ –º–º —Ä—Ç.—Å—Ç.
        - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π —Å –º–∏–Ω/–º–∞–∫—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏
        JSON: {"current":{"temp":—á–∏—Å–ª–æ,"feels":—á–∏—Å–ª–æ,"desc":"—Ç–µ–∫—Å—Ç","humid":—á–∏—Å–ª–æ,"wind":—á–∏—Å–ª–æ,"press":—á–∏—Å–ª–æ},"forecast":[{"day":"–ü–Ω","temp_min":—á–∏—Å–ª–æ,"temp_max":—á–∏—Å–ª–æ,"desc":"—Ç–µ–∫—Å—Ç"}]}`,
      priority: 1,
      isActive: true
    },
    {
      name: 'Gismeteo',
      url: 'https://www.gismeteo.ru/weather-gorkhon-28895/',
      prompt: `–ù–∞–π–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ –ì–æ—Ä—Ö–æ–Ω–µ –Ω–∞ Gismeteo:
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ —Å–µ–π—á–∞—Å –∏ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
        - –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (—Å–æ–ª–Ω–µ—á–Ω–æ, –¥–æ–∂–¥—å, —Å–Ω–µ–≥, –æ–±–ª–∞—á–Ω–æ)
        - –í–ª–∞–∂–Ω–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ
        - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏
        –û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.`,
      priority: 2,
      isActive: true
    },
    {
      name: 'Weather.com',
      url: 'https://weather.com/weather/today/l/51.56,108.79',
      prompt: `–ü–æ–ª—É—á–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ì–æ—Ä—Ö–æ–Ω–∞ (51.56¬∞N, 108.79¬∞E):
        - –¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
        - –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        - –í–ª–∞–∂–Ω–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
        - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π
        –í–µ—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON.`,
      priority: 3,
      isActive: true
    },
    {
      name: 'OpenWeatherMap',
      url: 'https://openweathermap.org/city/2021164',
      prompt: `–ù–∞–π–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –ì–æ—Ä—Ö–æ–Ω–∞:
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è
        - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã (–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π)
        - –í–ª–∞–∂–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ
        - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –≤ JSON —Å —Ä—É—Å—Å–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.`,
      priority: 4,
      isActive: true
    },
    {
      name: '–ü–æ–≥–æ–¥–∞ Mail.ru',
      url: 'https://pogoda.mail.ru/prognoz/gorkhon/',
      prompt: `–°–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ –ì–æ—Ä—Ö–æ–Ω–µ —Å Mail.ru:
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
        - –ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (–¥–æ–∂–¥—å, —Å–Ω–µ–≥, —Å–æ–ª–Ω—Ü–µ, –æ–±–ª–∞–∫–∞)
        - –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞, —Å–∏–ª–∞ –≤–µ—Ç—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ
        - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
        JSON —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.`,
      priority: 5,
      isActive: true
    }
  ];

  private cache: Map<string, { data: WeatherData; expiry: Date }> = new Map();
  private cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –∫–µ—à
  private updateInterval = 2 * 60 * 1000; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
  private monitoringActive = false;
  private intervalId?: NodeJS.Timeout;

  constructor() {
    this.startMonitoring();
  }

  async fetchFromSource(source: WeatherSource): Promise<WeatherData | null> {
    try {
      console.log(`üå¶Ô∏è –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ ${source.name}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å web_fetch
      if (typeof web_fetch !== 'function') {
        console.warn('‚ö†Ô∏è web_fetch –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return this.getMockWeatherData(source);
      }
      
      const rawData = await web_fetch(source.url, source.prompt);
      const parsedData = this.parseWeatherData(rawData, source);
      
      if (parsedData) {
        // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.cache.set(source.name, {
          data: parsedData,
          expiry: new Date(Date.now() + this.cacheTimeout)
        });
        
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ ${source.name} –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
        return parsedData;
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${source.name}:`, error);
    }
    
    return null;
  }

  private parseWeatherData(rawData: string, source: WeatherSource): WeatherData | null {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const jsonMatch = rawData.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      }

      const data = JSON.parse(jsonMatch[0]);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const normalized: WeatherData = {
        source: source.name,
        timestamp: new Date(),
        current: {
          temperature: this.extractNumber(data.current?.temp || data.temperature || data.current?.temperature),
          feelsLike: this.extractNumber(data.current?.feels || data.feelsLike || data.current?.feelsLike),
          description: this.normalizeDescription(data.current?.desc || data.description || data.current?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
          humidity: this.extractNumber(data.current?.humid || data.humidity || data.current?.humidity),
          windSpeed: this.extractNumber(data.current?.wind || data.windSpeed || data.current?.windSpeed),
          pressure: this.extractNumber(data.current?.press || data.pressure),
          visibility: this.extractNumber(data.current?.visibility)
        },
        forecast: this.normalizeForecast(data.forecast || []),
        reliability: this.calculateReliability(data, source)
      };

      return this.validateWeatherData(normalized) ? normalized : null;
    } catch (error) {
      console.warn(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${source.name}:`, error);
      return null;
    }
  }

  private extractNumber(value: any): number {
    if (typeof value === 'number') return value;
    if (typeof value === 'string') {
      const num = parseFloat(value.replace(/[^\d.-]/g, ''));
      return isNaN(num) ? 0 : num;
    }
    return 0;
  }

  private normalizeDescription(desc: string): string {
    const descriptions: { [key: string]: string } = {
      'clear': '–Ø—Å–Ω–æ', 'sunny': '–°–æ–ª–Ω–µ—á–Ω–æ', 'sun': '–°–æ–ª–Ω–µ—á–Ω–æ',
      'cloudy': '–û–±–ª–∞—á–Ω–æ', 'overcast': '–ü–∞—Å–º—É—Ä–Ω–æ', 'clouds': '–û–±–ª–∞—á–Ω–æ',
      'rain': '–î–æ–∂–¥—å', 'rainy': '–î–æ–∂–¥–ª–∏–≤–æ', 'shower': '–õ–∏–≤–µ–Ω—å',
      'snow': '–°–Ω–µ–≥', 'snowy': '–°–Ω–µ–∂–Ω–æ', 'blizzard': '–ú–µ—Ç–µ–ª—å',
      'fog': '–¢—É–º–∞–Ω', 'mist': '–î—ã–º–∫–∞', 'haze': '–ú–≥–ª–∞',
      'storm': '–ì—Ä–æ–∑–∞', 'thunderstorm': '–ì—Ä–æ–∑–∞', 'thunder': '–ì—Ä–æ–∑–∞'
    };

    const lowerDesc = desc.toLowerCase();
    for (const [key, value] of Object.entries(descriptions)) {
      if (lowerDesc.includes(key)) return value;
    }
    
    return desc;
  }

  private normalizeForecast(forecast: any[]): WeatherData['forecast'] {
    return forecast.slice(0, 7).map((day, index) => ({
      date: new Date(Date.now() + index * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      day: this.getDayName(index),
      temperature: {
        min: this.extractNumber(day.temp_min || day.minTemp || day.min),
        max: this.extractNumber(day.temp_max || day.maxTemp || day.max)
      },
      description: this.normalizeDescription(day.desc || day.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
      humidity: this.extractNumber(day.humidity || 50),
      windSpeed: this.extractNumber(day.wind || day.windSpeed || 0)
    }));
  }

  private getDayName(offset: number): string {
    const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    const today = new Date();
    const targetDate = new Date(today.getTime() + (offset * 24 * 60 * 60 * 1000));
    
    if (offset === 0) return '–°–µ–≥–æ–¥–Ω—è';
    if (offset === 1) return '–ó–∞–≤—Ç—Ä–∞';
    
    return days[targetDate.getDay()];
  }

  private calculateReliability(data: any, source: WeatherSource): number {
    let score = 50; // –ë–∞–∑–æ–≤–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    score += (6 - source.priority) * 10;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (data.current?.temp || data.temperature) score += 15;
    if (data.current?.humid || data.humidity) score += 10;
    if (data.current?.wind || data.windSpeed) score += 10;
    if (data.forecast?.length > 0) score += 15;
    
    return Math.min(100, Math.max(0, score));
  }

  private validateWeatherData(data: WeatherData): boolean {
    return (
      data.current.temperature > -60 && data.current.temperature < 60 &&
      data.current.humidity >= 0 && data.current.humidity <= 100 &&
      data.current.windSpeed >= 0 && data.current.windSpeed < 200
    );
  }

  async getAggregatedWeather(): Promise<WeatherData> {
    const activeSources = this.sources.filter(s => s.isActive);
    const weatherResults: WeatherData[] = [];

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const promises = activeSources.map(source => this.fetchFromSource(source));
    const results = await Promise.allSettled(promises);

    results.forEach((result, index) => {
      if (result.status === 'fulfilled' && result.value) {
        weatherResults.push(result.value);
      }
    });

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à
    if (weatherResults.length === 0) {
      const cachedData = this.getBestCachedData();
      if (cachedData) return cachedData;
      
      // Fallback –¥–∞–Ω–Ω—ã–µ
      return this.getFallbackWeather();
    }

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    return this.aggregateWeatherData(weatherResults);
  }

  private getBestCachedData(): WeatherData | null {
    let bestData: WeatherData | null = null;
    let bestReliability = 0;

    for (const [, cached] of this.cache) {
      if (cached.expiry > new Date() && cached.data.reliability > bestReliability) {
        bestData = cached.data;
        bestReliability = cached.data.reliability;
      }
    }

    return bestData;
  }

  private aggregateWeatherData(results: WeatherData[]): WeatherData {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    results.sort((a, b) => b.reliability - a.reliability);
    
    const primary = results[0];
    const secondary = results[1];

    // –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–∑ —Ç–æ–ø-2 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const avgTemp = secondary 
      ? Math.round((primary.current.temperature + secondary.current.temperature) / 2)
      : primary.current.temperature;
    
    const avgFeels = secondary
      ? Math.round((primary.current.feelsLike + secondary.current.feelsLike) / 2)
      : primary.current.feelsLike;

    return {
      source: `–ê–≥—Ä–µ–≥–∞—Ü–∏—è: ${results.map(r => r.source).join(', ')}`,
      timestamp: new Date(),
      current: {
        ...primary.current,
        temperature: avgTemp,
        feelsLike: avgFeels
      },
      forecast: primary.forecast,
      reliability: Math.min(100, primary.reliability + (secondary ? 10 : 0))
    };
  }

  private getFallbackWeather(): WeatherData {
    return {
      source: '–†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      timestamp: new Date(),
      current: {
        temperature: -8,
        feelsLike: -12,
        description: '–û–±–ª–∞—á–Ω–æ',
        humidity: 78,
        windSpeed: 5,
        pressure: 740
      },
      forecast: [
        { date: new Date().toISOString().split('T')[0], day: '–°–µ–≥–æ–¥–Ω—è', temperature: { min: -12, max: -5 }, description: '–û–±–ª–∞—á–Ω–æ', humidity: 78, windSpeed: 5 },
        { date: new Date(Date.now() + 86400000).toISOString().split('T')[0], day: '–ó–∞–≤—Ç—Ä–∞', temperature: { min: -10, max: -3 }, description: '–°–Ω–µ–≥', humidity: 82, windSpeed: 7 }
      ],
      reliability: 20
    };
  }

  startMonitoring(): void {
    if (this.monitoringActive) return;
    
    this.monitoringActive = true;
    console.log('üå¶Ô∏è –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã –¥–ª—è –ì–æ—Ä—Ö–æ–Ω–∞');
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    this.getAggregatedWeather();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    this.intervalId = setInterval(() => {
      if (this.monitoringActive) {
        this.getAggregatedWeather().then(weather => {
          console.log(`üå¶Ô∏è –ü–æ–≥–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${weather.current.temperature}¬∞C –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${weather.source}`);
        });
      }
    }, this.updateInterval);
  }

  stopMonitoring(): void {
    this.monitoringActive = false;
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = undefined;
    }
    console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  getSourcesStatus(): { name: string; active: boolean; lastUpdate?: Date; reliability: number }[] {
    return this.sources.map(source => {
      const cached = this.cache.get(source.name);
      return {
        name: source.name,
        active: source.isActive,
        lastUpdate: cached?.data.timestamp,
        reliability: cached?.data.reliability || 0
      };
    });
  }

  private getMockWeatherData(source: WeatherSource): WeatherData {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ì–æ—Ä—Ö–æ–Ω–∞
    const temp = Math.round(-15 + Math.random() * 30); // –æ—Ç -15 –¥–æ +15
    const feels = temp - Math.round(Math.random() * 5); // –æ—â—É—â–∞–µ—Ç—Å—è —Ö–æ–ª–æ–¥–Ω–µ–µ
    
    const conditions = ['–Ø—Å–Ω–æ', '–û–±–ª–∞—á–Ω–æ', '–ü–∞—Å–º—É—Ä–Ω–æ', '–°–Ω–µ–≥', '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', '–¢—É–º–∞–Ω'];
    const condition = conditions[Math.floor(Math.random() * conditions.length)];
    
    return {
      source: `${source.name} (–º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)`,
      timestamp: new Date(),
      current: {
        temperature: temp,
        feelsLike: feels,
        description: condition,
        humidity: 70 + Math.round(Math.random() * 20), // 70-90%
        windSpeed: Math.round(Math.random() * 10), // 0-10 –º/—Å
        pressure: 740 + Math.round(Math.random() * 20), // 740-760
        visibility: 5 + Math.round(Math.random() * 10) // 5-15 –∫–º
      },
      forecast: Array.from({ length: 5 }, (_, i) => ({
        date: new Date(Date.now() + i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        day: this.getDayName(i),
        temperature: {
          min: temp - Math.round(Math.random() * 5),
          max: temp + Math.round(Math.random() * 5)
        },
        description: conditions[Math.floor(Math.random() * conditions.length)],
        humidity: 70 + Math.round(Math.random() * 20),
        windSpeed: Math.round(Math.random() * 10)
      })),
      reliability: 30 + source.priority * 10 // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω—ã
    };
  }

  toggleSource(sourceName: string, active: boolean): void {
    const source = this.sources.find(s => s.name === sourceName);
    if (source) {
      source.isActive = active;
      console.log(`${active ? '‚úÖ' : '‚ùå'} –ò—Å—Ç–æ—á–Ω–∏–∫ ${sourceName} ${active ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
export const weatherMonitor = new WeatherMonitor();