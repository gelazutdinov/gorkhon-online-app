import { useState } from 'react';
import Icon from '@/components/ui/icon';

interface SecuritySettings {
  twoFactorEnabled: boolean;
  smsNotifications: boolean;
  emailNotifications: boolean;
  loginAlerts: boolean;
  dataEncryption: boolean;
  privacyMode: boolean;
}

const SecuritySettings = () => {
  const [settings, setSettings] = useState<SecuritySettings>({
    twoFactorEnabled: false,
    smsNotifications: true,
    emailNotifications: true,
    loginAlerts: true,
    dataEncryption: true,
    privacyMode: false
  });

  const [showTwoFactorSetup, setShowTwoFactorSetup] = useState(false);
  const [twoFactorStep, setTwoFactorStep] = useState<'phone' | 'verify' | 'backup'>('phone');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [backupCodes, setBackupCodes] = useState<string[]>([]);

  const generateBackupCodes = () => {
    const codes = [];
    for (let i = 0; i < 8; i++) {
      codes.push(Math.random().toString(36).substring(2, 8).toUpperCase());
    }
    return codes;
  };

  const handleToggleSetting = (key: keyof SecuritySettings) => {
    if (key === 'twoFactorEnabled' && !settings.twoFactorEnabled) {
      setShowTwoFactorSetup(true);
      return;
    }
    
    setSettings(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const handleSetupTwoFactor = () => {
    if (twoFactorStep === 'phone') {
      if (!phoneNumber) return;
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞:', phoneNumber);
      setTwoFactorStep('verify');
    } else if (twoFactorStep === 'verify') {
      if (!verificationCode) return;
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞:', verificationCode);
      const codes = generateBackupCodes();
      setBackupCodes(codes);
      setTwoFactorStep('backup');
    } else if (twoFactorStep === 'backup') {
      setSettings(prev => ({ ...prev, twoFactorEnabled: true }));
      setShowTwoFactorSetup(false);
      setTwoFactorStep('phone');
      setPhoneNumber('');
      setVerificationCode('');
      setBackupCodes([]);
    }
  };

  const securityLevel = () => {
    const enabledCount = Object.values(settings).filter(Boolean).length;
    const total = Object.keys(settings).length;
    const percentage = (enabledCount / total) * 100;
    
    if (percentage >= 80) return { level: '–í—ã—Å–æ–∫–∏–π', color: 'text-green-600', bg: 'bg-green-100' };
    if (percentage >= 50) return { level: '–°—Ä–µ–¥–Ω–∏–π', color: 'text-yellow-600', bg: 'bg-yellow-100' };
    return { level: '–ù–∏–∑–∫–∏–π', color: 'text-red-600', bg: 'bg-red-100' };
  };

  const securityInfo = securityLevel();

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-gradient-to-r from-gorkhon-pink to-gorkhon-green text-white rounded-2xl p-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold mb-2">üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h1>
            <p className="text-white/90">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
          </div>
          <div className="text-right">
            <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-full ${securityInfo.bg} ${securityInfo.color} text-sm font-medium`}>
              <Icon name="Shield" size={16} />
              {securityInfo.level}
            </div>
          </div>
        </div>
      </div>

      {/* –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã SSL/TLS */}
      <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
        <div className="flex items-start gap-4">
          <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
            <Icon name="ShieldCheck" size={24} className="text-green-600" />
          </div>
          <div className="flex-1">
            <h3 className="font-bold text-lg mb-2">üõ°Ô∏è SSL/TLS –ó–∞—â–∏—Ç–∞</h3>
            <p className="text-gray-600 mb-4">
              –í–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. 
              –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
            </p>
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-center gap-2 text-green-700">
                <Icon name="Lock" size={16} />
                <span className="font-medium">–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ</span>
              </div>
              <p className="text-green-600 text-sm mt-1">
                –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: TLS 1.3 ‚Ä¢ –í—ã–¥–∞–Ω: Let's Encrypt ‚Ä¢ –î–æ: 15.11.2024
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è */}
      <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
        <div className="flex items-start gap-4">
          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
            settings.twoFactorEnabled ? 'bg-green-100' : 'bg-orange-100'
          }`}>
            <Icon 
              name={settings.twoFactorEnabled ? "ShieldCheck" : "Shield"} 
              size={24} 
              className={settings.twoFactorEnabled ? 'text-green-600' : 'text-orange-600'} 
            />
          </div>
          <div className="flex-1">
            <div className="flex items-center justify-between mb-3">
              <div>
                <h3 className="font-bold text-lg">üì± –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
                <p className="text-gray-600">
                  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ SMS
                </p>
              </div>
              <button
                onClick={() => handleToggleSetting('twoFactorEnabled')}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  settings.twoFactorEnabled ? 'bg-green-600' : 'bg-gray-200'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    settings.twoFactorEnabled ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>
            {settings.twoFactorEnabled && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center gap-2 text-green-700">
                  <Icon name="CheckCircle" size={16} />
                  <span className="font-medium">–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞</span>
                </div>
                <p className="text-green-600 text-sm mt-1">
                  –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: +7 (xxx) xxx-xx-45
                </p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
        <h3 className="font-bold text-lg mb-4">üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
        <div className="space-y-4">
          {[
            {
              key: 'smsNotifications' as keyof SecuritySettings,
              title: 'SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
              description: '–ü–æ–ª—É—á–∞—Ç—å SMS –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç',
              icon: 'Smartphone'
            },
            {
              key: 'emailNotifications' as keyof SecuritySettings,
              title: 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
              description: '–ü–æ–ª—É—á–∞—Ç—å –ø–∏—Å—å–º–∞ –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö',
              icon: 'Mail'
            },
            {
              key: 'loginAlerts' as keyof SecuritySettings,
              title: '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ',
              description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏—è—Ö',
              icon: 'AlertTriangle'
            }
          ].map((item) => (
            <div key={item.key} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div className="flex items-center gap-3">
                <Icon name={item.icon as any} size={20} className="text-gray-600" />
                <div>
                  <h4 className="font-medium">{item.title}</h4>
                  <p className="text-sm text-gray-600">{item.description}</p>
                </div>
              </div>
              <button
                onClick={() => handleToggleSetting(item.key)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  settings[item.key] ? 'bg-green-600' : 'bg-gray-200'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    settings[item.key] ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
        <h3 className="font-bold text-lg mb-4">‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        <div className="space-y-4">
          {[
            {
              key: 'dataEncryption' as keyof SecuritySettings,
              title: '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
              description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
              icon: 'Lock'
            },
            {
              key: 'privacyMode' as keyof SecuritySettings,
              title: '–†–µ–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏',
              description: '–°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
              icon: 'EyeOff'
            }
          ].map((item) => (
            <div key={item.key} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div className="flex items-center gap-3">
                <Icon name={item.icon as any} size={20} className="text-gray-600" />
                <div>
                  <h4 className="font-medium">{item.title}</h4>
                  <p className="text-sm text-gray-600">{item.description}</p>
                </div>
              </div>
              <button
                onClick={() => handleToggleSetting(item.key)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  settings[item.key] ? 'bg-green-600' : 'bg-gray-200'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    settings[item.key] ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA */}
      {showTwoFactorSetup && (
        <div className="fixed inset-0 z-[70] flex items-center justify-center p-4">
          <div className="absolute inset-0 bg-black/50 backdrop-blur-sm" onClick={() => setShowTwoFactorSetup(false)}></div>
          <div className="relative bg-white rounded-2xl p-6 w-full max-w-md shadow-2xl">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold">üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
              <button
                onClick={() => setShowTwoFactorSetup(false)}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <Icon name="X" size={20} />
              </button>
            </div>

            {twoFactorStep === 'phone' && (
              <div className="space-y-4">
                <p className="text-gray-600">
                  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                </p>
                <div>
                  <label className="block text-sm font-medium mb-2">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
                  <input
                    type="tel"
                    value={phoneNumber}
                    onChange={(e) => setPhoneNumber(e.target.value)}
                    placeholder="+7 (999) 123-45-67"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                  />
                </div>
                <button
                  onClick={handleSetupTwoFactor}
                  disabled={!phoneNumber}
                  className="w-full bg-gradient-to-r from-gorkhon-pink to-gorkhon-green text-white py-3 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:shadow-lg transition-all"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
                </button>
              </div>
            )}

            {twoFactorStep === 'verify' && (
              <div className="space-y-4">
                <p className="text-gray-600">
                  –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä {phoneNumber}
                </p>
                <div>
                  <label className="block text-sm font-medium mb-2">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</label>
                  <input
                    type="text"
                    value={verificationCode}
                    onChange={(e) => setVerificationCode(e.target.value)}
                    placeholder="123456"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent text-center text-xl font-mono"
                    maxLength={6}
                  />
                </div>
                <button
                  onClick={handleSetupTwoFactor}
                  disabled={!verificationCode}
                  className="w-full bg-gradient-to-r from-gorkhon-pink to-gorkhon-green text-white py-3 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:shadow-lg transition-all"
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                </button>
              </div>
            )}

            {twoFactorStep === 'backup' && (
              <div className="space-y-4">
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-center gap-2 text-yellow-700 mb-2">
                    <Icon name="AlertTriangle" size={16} />
                    <span className="font-medium">–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã</span>
                  </div>
                  <p className="text-yellow-600 text-sm">
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–¥—ã, –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                  </p>
                </div>
                
                <div className="grid grid-cols-2 gap-2 p-4 bg-gray-50 rounded-lg">
                  {backupCodes.map((code, index) => (
                    <div key={index} className="text-center p-2 bg-white rounded border font-mono text-sm">
                      {code}
                    </div>
                  ))}
                </div>

                <button
                  onClick={handleSetupTwoFactor}
                  className="w-full bg-gradient-to-r from-gorkhon-pink to-gorkhon-green text-white py-3 rounded-lg font-medium hover:shadow-lg transition-all"
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                </button>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default SecuritySettings;