import { useState, useEffect } from 'react';
import { UserProfile } from '@/hooks/useUser';
import { SocialUser, SocialPost, FriendRequest } from './types/SocialTypes';
import PostCreator from './components/PostCreator';
import PostItem from './components/PostItem';
import FriendsTab from './components/FriendsTab';
import ProfileTab from './components/ProfileTab';
import SocialNavTabs from './components/SocialNavTabs';

interface AdvancedSocialNetworkProps {
  currentUser: UserProfile;
}

const AdvancedSocialNetwork = ({ currentUser }: AdvancedSocialNetworkProps) => {
  const [socialUsers, setSocialUsers] = useState<SocialUser[]>([]);
  const [posts, setPosts] = useState<SocialPost[]>([]);
  const [friendRequests, setFriendRequests] = useState<FriendRequest[]>([]);
  const [newPost, setNewPost] = useState('');
  const [activeTab, setActiveTab] = useState<'feed' | 'friends' | 'profile'>('feed');
  const [currentSocialUser, setCurrentSocialUser] = useState<SocialUser | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const initializeSocialData = () => {
      // –°–æ–∑–¥–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ
      const socialUser: SocialUser = {
        ...currentUser,
        followers: [],
        following: ['gorkhon_official'],
        posts: [],
        bio: '–ñ–∏—Ç–µ–ª—å –ø–æ—Å–µ–ª–∫–∞ –ì–æ—Ä—Ö–æ–Ω üèòÔ∏è',
        isOnline: true,
        lastSeen: new Date().toISOString()
      };

      // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ì–æ—Ä—Ö–æ–Ω
      const officialAccount: SocialUser = {
        id: 'gorkhon_official',
        name: '–ì–æ—Ä—Ö–æ–Ω',
        email: 'info@gorkhon.ru',
        phone: '+7 (30132) 2-XX-XX',
        gender: 'male' as const,
        birthDate: '',
        avatar: 'üèòÔ∏è',
        interests: ['–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '–æ–±—ä—è–≤–ª–µ–Ω–∏—è', '–Ω–æ–≤–æ—Å—Ç–∏'],
        status: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ—Å–µ–ª–∫–∞',
        registeredAt: Date.now() - 365 * 24 * 60 * 60 * 1000,
        lastActiveAt: Date.now(),
        stats: {
          totalSessions: 1000,
          totalTimeSpent: 50000,
          sectionsVisited: { home: 500, news: 300, support: 200, profile: 100 },
          featuresUsed: { importantNumbers: 50, schedule: 80, donation: 30, workSchedule: 60, pvz: 40, notifications: 100 },
          daysActive: 365
        },
        followers: [currentUser.id],
        following: [],
        posts: [],
        bio: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ—Å–µ–ª–∫–∞ –ì–æ—Ä—Ö–æ–Ω. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏! üì¢',
        isOnline: true
      };

      // –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      const demoUsers: SocialUser[] = [
        {
          id: 'user_demo_1',
          name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
          email: 'anna@example.com',
          phone: '+7 999 123 45 67',
          gender: 'female' as const,
          birthDate: '1985-06-15',
          avatar: 'üë©',
          interests: ['—Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '—Ä—É–∫–æ–¥–µ–ª–∏–µ', '–∫—É–ª–∏–Ω–∞—Ä–∏—è'],
          status: '–õ—é–±–ª—é –Ω–∞—à —É—é—Ç–Ω—ã–π –ø–æ—Å–µ–ª–æ–∫',
          registeredAt: Date.now() - 30 * 24 * 60 * 60 * 1000,
          lastActiveAt: Date.now() - 2 * 60 * 60 * 1000,
          stats: {
            totalSessions: 45,
            totalTimeSpent: 1200,
            sectionsVisited: { home: 20, news: 15, support: 5, profile: 10 },
            featuresUsed: { importantNumbers: 5, schedule: 8, donation: 3, workSchedule: 6, pvz: 4, notifications: 10 },
            daysActive: 25
          },
          followers: [],
          following: ['gorkhon_official'],
          posts: [],
          bio: '–ú–∞–º–∞ –¥–≤–æ–∏—Ö –¥–µ—Ç–µ–π, —É–≤–ª–µ–∫–∞—é—Å—å —Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ–º üå∏',
          isOnline: false,
          lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
        }
      ];

      const allUsers = [socialUser, officialAccount, ...demoUsers];
      setSocialUsers(allUsers);
      setCurrentSocialUser(socialUser);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const savedRequests = localStorage.getItem('gorkhon_friend_requests');
      if (savedRequests) {
        setFriendRequests(JSON.parse(savedRequests));
      }

      const savedPosts = localStorage.getItem('gorkhon_social_posts');
      if (savedPosts) {
        setPosts(JSON.parse(savedPosts));
      }
    };

    initializeSocialData();
  }, [currentUser]);

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –í–ö –≤–∏–¥–∂–µ—Ç–æ–º –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
  useEffect(() => {
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –í–ö –≤–∏–¥–∂–µ—Ç–∞
    const fetchVkPosts = () => {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VK API
      const vkPosts: SocialPost[] = [
        {
          id: 'vk_post_1',
          authorId: 'gorkhon_official',
          content: 'üéÑ –ù–û–í–û–ì–û–î–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø –í –ì–û–†–•–û–ù–ï\n\nüìÖ 30 –¥–µ–∫–∞–±—Ä—è, 15:00 - –î–µ—Ç—Å–∫–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–∫ –≤ –∫–ª—É–±–µ\nüìÖ 31 –¥–µ–∫–∞–±—Ä—è, 23:00 - –ù–æ–≤–æ–≥–æ–¥–Ω—è—è –µ–ª–∫–∞ –Ω–∞ –ø–ª–æ—â–∞–¥–∏\n\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –∂–∏—Ç–µ–ª–µ–π! –ì–æ—Ä—è—á–∏–π —á–∞–π –∏ —Å–ª–∞–¥–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–π! ‚òïüç™',
          images: ['https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=500'],
          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
          likes: [currentUser.id],
          comments: [],
          shares: 15
        },
        {
          id: 'vk_post_2',
          authorId: 'gorkhon_official',
          content: '‚ö†Ô∏è –í–ê–ñ–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï\n\n–ó–∞–≤—Ç—Ä–∞, 26 –¥–µ–∫–∞–±—Ä—è, —Å 9:00 –¥–æ 15:00 –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —É–ª–∏—Ü–∞—Ö:\n\n‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è\n‚Ä¢ –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è\n‚Ä¢ –°–∞–¥–æ–≤–∞—è\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.',
          timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
          likes: [],
          comments: [],
          shares: 8
        }
      ];

      setPosts(prev => {
        const existingIds = prev.map(p => p.id);
        const newPosts = vkPosts.filter(p => !existingIds.includes(p.id));
        return [...newPosts, ...prev];
      });
    };

    fetchVkPosts();
  }, [currentUser.id]);

  const sendFriendRequest = (toUserId: string) => {
    const request: FriendRequest = {
      id: Date.now().toString(),
      fromUserId: currentUser.id,
      toUserId,
      timestamp: new Date().toISOString(),
      status: 'pending'
    };

    const updatedRequests = [...friendRequests, request];
    setFriendRequests(updatedRequests);
    localStorage.setItem('gorkhon_friend_requests', JSON.stringify(updatedRequests));
  };

  const respondToFriendRequest = (requestId: string, response: 'accepted' | 'rejected') => {
    const updatedRequests = friendRequests.map(req => 
      req.id === requestId ? { ...req, status: response } : req
    );
    setFriendRequests(updatedRequests);
    localStorage.setItem('gorkhon_friend_requests', JSON.stringify(updatedRequests));

    if (response === 'accepted') {
      const request = friendRequests.find(r => r.id === requestId);
      if (request && currentSocialUser) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è
        const updatedUser = {
          ...currentSocialUser,
          following: [...currentSocialUser.following, request.fromUserId]
        };
        setCurrentSocialUser(updatedUser);
      }
    }
  };

  const createPost = () => {
    if (!newPost.trim() || !currentSocialUser) return;

    const post: SocialPost = {
      id: `post_${Date.now()}`,
      authorId: currentUser.id,
      content: newPost,
      timestamp: new Date().toISOString(),
      likes: [],
      comments: [],
      shares: 0
    };

    const updatedPosts = [post, ...posts];
    setPosts(updatedPosts);
    localStorage.setItem('gorkhon_social_posts', JSON.stringify(updatedPosts));
    setNewPost('');
  };

  const toggleLike = (postId: string) => {
    const updatedPosts = posts.map(post => {
      if (post.id === postId) {
        const hasLiked = post.likes.includes(currentUser.id);
        return {
          ...post,
          likes: hasLiked 
            ? post.likes.filter(id => id !== currentUser.id)
            : [...post.likes, currentUser.id]
        };
      }
      return post;
    });
    setPosts(updatedPosts);
    localStorage.setItem('gorkhon_social_posts', JSON.stringify(updatedPosts));
  };

  const getUserById = (userId: string) => socialUsers.find(u => u.id === userId);

  return (
    <div className="max-w-4xl mx-auto">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã */}
      <SocialNavTabs
        activeTab={activeTab}
        onTabChange={setActiveTab}
        friendRequests={friendRequests}
        currentUser={currentUser}
      />

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞ */}
      {activeTab === 'feed' && (
        <div className="space-y-6">
          {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ */}
          <PostCreator
            currentUser={currentUser}
            newPost={newPost}
            onPostChange={setNewPost}
            onCreatePost={createPost}
          />

          {/* –õ–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤ */}
          <div className="space-y-4">
            {posts.map(post => (
              <PostItem
                key={post.id}
                post={post}
                author={getUserById(post.authorId)}
                currentUser={currentUser}
                onToggleLike={toggleLike}
              />
            ))}
          </div>
        </div>
      )}

      {activeTab === 'friends' && (
        <FriendsTab
          socialUsers={socialUsers}
          currentUser={currentUser}
          currentSocialUser={currentSocialUser}
          friendRequests={friendRequests}
          onSendFriendRequest={sendFriendRequest}
          onRespondToFriendRequest={respondToFriendRequest}
        />
      )}

      {activeTab === 'profile' && currentSocialUser && (
        <ProfileTab currentSocialUser={currentSocialUser} />
      )}
    </div>
  );
};

export default AdvancedSocialNetwork;