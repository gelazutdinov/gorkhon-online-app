import { useState, useRef } from 'react';
import { SocialUser } from '../types/SocialTypes';
import Icon from '@/components/ui/icon';

interface ProfileSettingsProps {
  currentSocialUser: SocialUser;
  onUpdateProfile: (updates: Partial<SocialUser>) => void;
}

const ProfileSettings = ({ currentSocialUser, onUpdateProfile }: ProfileSettingsProps) => {
  const [isEditing, setIsEditing] = useState(false);
  const [name, setName] = useState(currentSocialUser.name);
  const [bio, setBio] = useState(currentSocialUser.bio || '');
  const [avatar, setAvatar] = useState(currentSocialUser.avatar);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setAvatar(result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSave = () => {
    onUpdateProfile({
      name,
      bio,
      avatar
    });
    setIsEditing(false);
  };

  const handleCancel = () => {
    setName(currentSocialUser.name);
    setBio(currentSocialUser.bio || '');
    setAvatar(currentSocialUser.avatar);
    setIsEditing(false);
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h3>
        {!isEditing ? (
          <button
            onClick={() => setIsEditing(true)}
            className="flex items-center gap-2 px-4 py-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
          >
            <Icon name="Edit" size={16} />
            <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
          </button>
        ) : (
          <div className="flex gap-2">
            <button
              onClick={handleCancel}
              className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              onClick={handleSave}
              className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 rounded-lg transition-colors"
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        )}
      </div>

      <div className="space-y-6">
        {/* –ê–≤–∞—Ç–∞—Ä */}
        <div className="text-center">
          <div className="relative inline-block">
            {avatar && (avatar.startsWith('data:') || avatar.startsWith('http')) ? (
              <img
                src={avatar}
                alt="–ê–≤–∞—Ç–∞—Ä"
                className="w-24 h-24 rounded-full object-cover mx-auto border-4 border-gray-200"
              />
            ) : (
              <div className="w-24 h-24 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-3xl mx-auto border-4 border-gray-200">
                {avatar || 'üë§'}
              </div>
            )}
            
            <button
              onClick={() => fileInputRef.current?.click()}
              className="absolute bottom-0 right-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center hover:bg-blue-600 transition-colors shadow-lg"
              title="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
            >
              <Icon name="Camera" size={16} />
            </button>
          </div>
          
          <p className="text-sm text-gray-500 mt-2">
            –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–º–µ—Ä—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ
          </p>
          
          {avatar && avatar.startsWith('data:') && (
            <button
              onClick={() => setAvatar('üë§')}
              className="text-xs text-red-500 hover:text-red-700 mt-1"
            >
              –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ
            </button>
          )}
        </div>

        {/* –ò–º—è */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ò–º—è
          </label>
          {isEditing ? (
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              placeholder="–í–∞—à–µ –∏–º—è"
            />
          ) : (
            <p className="text-gray-800">{name}</p>
          )}
        </div>

        {/* –ë–∏–æ–≥—Ä–∞—Ñ–∏—è */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –û —Å–µ–±–µ
          </label>
          {isEditing ? (
            <textarea
              value={bio}
              onChange={(e) => setBio(e.target.value)}
              rows={3}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none resize-none"
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
            />
          ) : (
            <p className="text-gray-800">{bio || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
          )}
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-3 gap-4 pt-4 border-t border-gray-200">
          <div className="text-center">
            <div className="text-lg font-bold text-gray-800">{currentSocialUser.posts.length}</div>
            <div className="text-sm text-gray-600">–ø—É–±–ª–∏–∫–∞—Ü–∏–π</div>
          </div>
          <div className="text-center">
            <div className="text-lg font-bold text-gray-800">{currentSocialUser.followers.length}</div>
            <div className="text-sm text-gray-600">–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</div>
          </div>
          <div className="text-center">
            <div className="text-lg font-bold text-gray-800">{currentSocialUser.following.length}</div>
            <div className="text-sm text-gray-600">–ø–æ–¥–ø–∏—Å–æ–∫</div>
          </div>
        </div>
      </div>

      {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleAvatarUpload}
        className="hidden"
      />
    </div>
  );
};

export default ProfileSettings;