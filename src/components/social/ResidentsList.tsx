import { useState, useEffect } from 'react';
import Icon from '@/components/ui/icon';
import UserAvatar from '@/components/ui/UserAvatar';
import { UserProfile } from '@/hooks/useUser';

interface ResidentsListProps {
  currentUser: UserProfile;
  onUserSelect: (user: UserProfile) => void;
}

// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
const generateMockResidents = (): UserProfile[] => {
  const names = [
    { first: '–ê–Ω–Ω–∞', last: '–ò–≤–∞–Ω–æ–≤–∞', gender: 'female' as const },
    { first: '–ú–∏—Ö–∞–∏–ª', last: '–ü–µ—Ç—Ä–æ–≤', gender: 'male' as const },
    { first: '–ï–ª–µ–Ω–∞', last: '–°–∏–¥–æ—Ä–æ–≤–∞', gender: 'female' as const },
    { first: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', last: '–ö–æ–∑–ª–æ–≤', gender: 'male' as const },
    { first: '–ú–∞—Ä–∏—è', last: '–í–æ–ª–∫–æ–≤–∞', gender: 'female' as const },
    { first: '–î–º–∏—Ç—Ä–∏–π', last: '–ú–æ—Ä–æ–∑–æ–≤', gender: 'male' as const },
    { first: '–û–ª—å–≥–∞', last: '–ù–æ–≤–∏–∫–æ–≤–∞', gender: 'female' as const },
    { first: '–°–µ—Ä–≥–µ–π', last: '–û—Ä–ª–æ–≤', gender: 'male' as const },
    { first: '–¢–∞—Ç—å—è–Ω–∞', last: '–ü–∞–≤–ª–æ–≤–∞', gender: 'female' as const },
    { first: '–í–ª–∞–¥–∏–º–∏—Ä', last: '–ö—É–∑–Ω–µ—Ü–æ–≤', gender: 'male' as const }
  ];

  const interests = [
    '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–†—ã–±–∞–ª–∫–∞', '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–ß—Ç–µ–Ω–∏–µ', '–°–ø–æ—Ä—Ç', 
    '–ú—É–∑—ã–∫–∞', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–†—É–∫–æ–¥–µ–ª–∏–µ', '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏'
  ];

  const statuses = [
    '–õ—é–±–ª—é –Ω–∞—à –ø–æ—Å–µ–ª–æ–∫!', '–í–µ—Ç–µ—Ä–∞–Ω —Ç—Ä—É–¥–∞', '–ê–∫—Ç–∏–≤–Ω—ã–π –∂–∏—Ç–µ–ª—å', 
    '–ü–æ–º–æ–≥–∞—é —Å–æ—Å–µ–¥—è–º', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', '–ü—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫',
    '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä —Å–æ —Å—Ç–∞–∂–µ–º', '–ú–æ–ª–æ–¥–∞—è –º–∞–º–∞', '–°—Ç—É–¥–µ–Ω—Ç', '–†–∞–±–æ—Ç–∞—é—â–∏–π –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä'
  ];

  return names.map((name, index) => ({
    id: `resident_${index + 1}`,
    name: `${name.first} ${name.last}`,
    email: `${name.first.toLowerCase()}@gorkhon.ru`,
    phone: `+7 (999) ${String(123 + index).padStart(3, '0')}-${String(45 + index).padStart(2, '0')}-${String(67 + index).padStart(2, '0')}`,
    gender: name.gender,
    birthDate: new Date(1960 + Math.random() * 40, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28)).toISOString().split('T')[0],
    avatar: name.gender === 'female' ? 'üë©' : 'üë®',
    interests: interests.slice(Math.floor(Math.random() * 3), Math.floor(Math.random() * 5) + 3),
    status: statuses[Math.floor(Math.random() * statuses.length)],
    city: '–ì–æ—Ä—Ö–æ–Ω',
    about: `–ñ–∏–≤—É –≤ –ì–æ—Ä—Ö–æ–Ω–µ —É–∂–µ ${Math.floor(Math.random() * 30) + 5} –ª–µ—Ç. ${name.gender === 'female' ? '–õ—é–±–ª—é' : '–õ—é–±–ª—é'} –ø—Ä–∏—Ä–æ–¥—É –∏ –æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å–µ–¥—è–º–∏.`,
    friends: [],
    isOnline: Math.random() > 0.6,
    registeredAt: Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000,
    lastActiveAt: Date.now() - Math.random() * 24 * 60 * 60 * 1000,
    stats: {
      totalSessions: Math.floor(Math.random() * 100) + 10,
      totalTimeSpent: Math.floor(Math.random() * 500) + 50,
      sectionsVisited: {
        home: Math.floor(Math.random() * 50),
        news: Math.floor(Math.random() * 30),
        support: Math.floor(Math.random() * 20),
        profile: Math.floor(Math.random() * 40)
      },
      featuresUsed: {
        importantNumbers: Math.floor(Math.random() * 20),
        schedule: Math.floor(Math.random() * 15),
        donation: Math.floor(Math.random() * 5),
        workSchedule: Math.floor(Math.random() * 10),
        pvz: Math.floor(Math.random() * 8),
        notifications: Math.floor(Math.random() * 25)
      },
      daysActive: Math.floor(Math.random() * 180) + 30
    }
  }));
};

const ResidentsList = ({ currentUser, onUserSelect }: ResidentsListProps) => {
  const [residents, setResidents] = useState<UserProfile[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [filter, setFilter] = useState<'all' | 'online' | 'friends'>('all');
  const [sortBy, setSortBy] = useState<'name' | 'lastActive' | 'age'>('name');

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∂–∏—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç API)
    const mockResidents = generateMockResidents();
    setResidents(mockResidents);
  }, []);

  const getAge = (birthDate: string) => {
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    return age;
  };

  const getLastSeenText = (lastActiveAt: number, isOnline?: boolean) => {
    if (isOnline) return '–æ–Ω–ª–∞–π–Ω';
    
    const now = Date.now();
    const diff = now - lastActiveAt;
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (minutes < 5) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    if (days === 1) return '–≤—á–µ—Ä–∞';
    return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
  };

  const filteredAndSortedResidents = residents
    .filter(resident => {
      // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (resident.id === currentUser.id) return false;
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        return resident.name.toLowerCase().includes(query) ||
               resident.status?.toLowerCase().includes(query) ||
               resident.interests?.some(interest => interest.toLowerCase().includes(query));
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      switch (filter) {
        case 'online':
          return resident.isOnline;
        case 'friends':
          return currentUser.friends?.includes(resident.id) || false;
        default:
          return true;
      }
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'lastActive':
          return (b.lastActiveAt || 0) - (a.lastActiveAt || 0);
        case 'age':
          return getAge(a.birthDate) - getAge(b.birthDate);
        case 'name':
        default:
          return a.name.localeCompare(b.name);
      }
    });

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold text-gray-800 flex items-center gap-2">
          <Icon name="Users" size={24} className="text-gorkhon-pink" />
          –ñ–∏—Ç–µ–ª–∏ –ì–æ—Ä—Ö–æ–Ω–∞
        </h2>
        <div className="text-sm text-gray-600">
          {filteredAndSortedResidents.length} —á–µ–ª–æ–≤–µ–∫
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <div className="relative">
        <Icon name="Search" size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Å—Ç–∞—Ç—É—Å—É, –∏–Ω—Ç–µ—Ä–µ—Å–∞–º..."
          className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
        />
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
      <div className="flex flex-wrap gap-2 justify-between">
        <div className="flex gap-2">
          {[
            { key: 'all', label: '–í—Å–µ', icon: 'Users' },
            { key: 'online', label: '–û–Ω–ª–∞–π–Ω', icon: 'Wifi' },
            { key: 'friends', label: '–î—Ä—É–∑—å—è', icon: 'Heart' }
          ].map(({ key, label, icon }) => (
            <button
              key={key}
              onClick={() => setFilter(key as any)}
              className={`flex items-center gap-1 px-3 py-1 rounded-full text-sm transition-colors ${
                filter === key
                  ? 'bg-gorkhon-pink text-white'
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              <Icon name={icon} size={14} />
              {label}
            </button>
          ))}
        </div>

        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value as any)}
          className="px-3 py-1 border border-gray-300 rounded-lg text-sm"
        >
          <option value="name">–ü–æ –∏–º–µ–Ω–∏</option>
          <option value="lastActive">–ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</option>
          <option value="age">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É</option>
        </select>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∂–∏—Ç–µ–ª–µ–π */}
      <div className="space-y-3">
        {filteredAndSortedResidents.length === 0 ? (
          <div className="text-center py-8">
            <Icon name="UserX" size={48} className="text-gray-300 mx-auto mb-3" />
            <p className="text-gray-500">–ñ–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          </div>
        ) : (
          filteredAndSortedResidents.map((resident) => (
            <div
              key={resident.id}
              onClick={() => onUserSelect(resident)}
              className="bg-white rounded-xl p-4 border border-gray-200 hover:border-gorkhon-pink hover:shadow-md transition-all cursor-pointer group"
            >
              <div className="flex items-start gap-4">
                {/* –ê–≤–∞—Ç–∞—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–Ω–ª–∞–π–Ω */}
                <div className="relative">
                  <UserAvatar user={resident} size="md" />
                  {resident.isOnline && (
                    <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full"></div>
                  )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between mb-1">
                    <h3 className="font-medium text-gray-800 group-hover:text-gorkhon-pink transition-colors">
                      {resident.name}
                    </h3>
                    <span className="text-xs text-gray-500">
                      {getAge(resident.birthDate)} –ª–µ—Ç
                    </span>
                  </div>

                  {resident.status && (
                    <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                      {resident.status}
                    </p>
                  )}

                  {/* –ò–Ω—Ç–µ—Ä–µ—Å—ã */}
                  {resident.interests && resident.interests.length > 0 && (
                    <div className="flex flex-wrap gap-1 mb-2">
                      {resident.interests.slice(0, 3).map((interest, index) => (
                        <span
                          key={index}
                          className="px-2 py-1 bg-gray-100 text-gray-600 rounded-full text-xs"
                        >
                          {interest}
                        </span>
                      ))}
                      {resident.interests.length > 3 && (
                        <span className="px-2 py-1 bg-gray-100 text-gray-500 rounded-full text-xs">
                          +{resident.interests.length - 3}
                        </span>
                      )}
                    </div>
                  )}

                  {/* –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>
                      {getLastSeenText(resident.lastActiveAt, resident.isOnline)}
                    </span>
                    <div className="flex items-center gap-3">
                      {currentUser.friends?.includes(resident.id) && (
                        <span className="flex items-center gap-1 text-gorkhon-pink">
                          <Icon name="Heart" size={12} />
                          –¥—Ä—É–≥
                        </span>
                      )}
                      <Icon name="ChevronRight" size={14} className="text-gray-400 group-hover:text-gorkhon-pink transition-colors" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
        <div className="flex items-center gap-2 mb-2">
          <Icon name="BarChart3" size={16} className="text-blue-600" />
          <span className="text-sm font-medium text-blue-800">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</span>
        </div>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <span className="text-blue-600">–í—Å–µ–≥–æ –∂–∏—Ç–µ–ª–µ–π:</span>
            <span className="font-medium text-blue-800 ml-1">{residents.length + 1}</span>
          </div>
          <div>
            <span className="text-blue-600">–û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å:</span>
            <span className="font-medium text-blue-800 ml-1">
              {residents.filter(r => r.isOnline).length + (currentUser.isOnline ? 1 : 0)}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResidentsList;