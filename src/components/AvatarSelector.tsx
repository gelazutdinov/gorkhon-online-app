import { useState } from 'react';
import Icon from '@/components/ui/icon';
import PhotoUpload from '@/components/PhotoUpload';

interface AvatarSelectorProps {
  selectedAvatar: string;
  gender: 'male' | 'female';
  onAvatarSelect: (avatar: string) => void;
}

const AvatarSelector = ({ selectedAvatar, gender, onAvatarSelect }: AvatarSelectorProps) => {
  const [showSelector, setShowSelector] = useState(false);

  const maleAvatars = [
    { id: 'default_male', emoji: 'üë®', name: '–ë–∞–∑–æ–≤—ã–π –º—É–∂—Å–∫–æ–π' },
    { id: 'businessman', emoji: 'üë®‚Äçüíº', name: '–î–µ–ª–æ–≤–æ–π' },
    { id: 'worker', emoji: 'üë®‚Äçüîß', name: '–†–∞–±–æ—á–∏–π' },
    { id: 'farmer', emoji: 'üë®‚Äçüåæ', name: '–§–µ—Ä–º–µ—Ä' },
    { id: 'teacher', emoji: 'üë®‚Äçüè´', name: '–£—á–∏—Ç–µ–ª—å' },
    { id: 'doctor', emoji: 'üë®‚Äç‚öïÔ∏è', name: '–í—Ä–∞—á' },
    { id: 'artist', emoji: 'üë®‚Äçüé®', name: '–•—É–¥–æ–∂–Ω–∏–∫' },
    { id: 'chef', emoji: 'üë®‚Äçüç≥', name: '–ü–æ–≤–∞—Ä' },
    { id: 'oldman', emoji: 'üë¥', name: '–ü–æ–∂–∏–ª–æ–π' },
    { id: 'boy', emoji: 'üë¶', name: '–ü–æ–¥—Ä–æ—Å—Ç–æ–∫' }
  ];

  const femaleAvatars = [
    { id: 'default_female', emoji: 'üë©', name: '–ë–∞–∑–æ–≤—ã–π –∂–µ–Ω—Å–∫–∏–π' },
    { id: 'businesswoman', emoji: 'üë©‚Äçüíº', name: '–î–µ–ª–æ–≤–∞—è' },
    { id: 'worker_woman', emoji: 'üë©‚Äçüîß', name: '–†–∞–±–æ—á–∞—è' },
    { id: 'farmer_woman', emoji: 'üë©‚Äçüåæ', name: '–§–µ—Ä–º–µ—Ä' },
    { id: 'teacher_woman', emoji: 'üë©‚Äçüè´', name: '–£—á–∏—Ç–µ–ª—å' },
    { id: 'doctor_woman', emoji: 'üë©‚Äç‚öïÔ∏è', name: '–í—Ä–∞—á' },
    { id: 'artist_woman', emoji: 'üë©‚Äçüé®', name: '–•—É–¥–æ–∂–Ω–∏–∫' },
    { id: 'chef_woman', emoji: 'üë©‚Äçüç≥', name: '–ü–æ–≤–∞—Ä' },
    { id: 'oldwoman', emoji: 'üëµ', name: '–ü–æ–∂–∏–ª–∞—è' },
    { id: 'girl', emoji: 'üëß', name: '–ü–æ–¥—Ä–æ—Å—Ç–æ–∫' }
  ];

  const avatars = gender === 'male' ? maleAvatars : femaleAvatars;
  const currentAvatar = avatars.find(a => a.id === selectedAvatar) || avatars[0];
  const isPhotoUploaded = selectedAvatar.startsWith('data:');

  return (
    <div className="relative">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        –ê–≤–∞—Ç–∞—Ä
      </label>
      
      <button
        type="button"
        onClick={() => setShowSelector(!showSelector)}
        className="w-full flex items-center gap-3 p-3 border border-gray-300 rounded-xl hover:border-gorkhon-pink focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent transition-all"
      >
        <div className="flex items-center justify-center w-12 h-12 bg-gray-100 rounded-full text-2xl overflow-hidden">
          {isPhotoUploaded ? (
            <img 
              src={selectedAvatar} 
              alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" 
              className="w-full h-full object-cover"
            />
          ) : (
            currentAvatar.emoji
          )}
        </div>
        <div className="flex-1 text-left">
          <div className="font-medium text-gray-800">
            {isPhotoUploaded ? '–í–∞—à–µ —Ñ–æ—Ç–æ' : currentAvatar.name}
          </div>
          <div className="text-sm text-gray-500">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å</div>
        </div>
        <Icon name={showSelector ? 'ChevronUp' : 'ChevronDown'} size={20} className="text-gray-400" />
      </button>

      {showSelector && (
        <div className="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-xl shadow-lg z-50 max-h-64 overflow-y-auto">
          <div className="p-3">
            <div className="text-sm font-medium text-gray-700 mb-3">
              –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä ({gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}):
            </div>
            
            {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ */}
            <div className="mb-4 flex items-center gap-3">
              <div className="w-20 h-20">
                <PhotoUpload
                  currentPhoto={isPhotoUploaded ? selectedAvatar : undefined}
                  onPhotoChange={(photo) => {
                    onAvatarSelect(photo || `default_${gender}`);
                    if (photo) setShowSelector(false);
                  }}
                  className="w-full h-full"
                />
              </div>
              <div className="flex-1">
                <div className="font-medium text-sm text-gray-700">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ</div>
                <div className="text-xs text-gray-500">JPG, PNG –¥–æ 5MB</div>
              </div>
            </div>
            
            <div className="border-t pt-3">
              <div className="text-sm text-gray-600 mb-2">–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä:</div>
              <div className="grid grid-cols-2 gap-2">
              {avatars.map((avatar) => (
                <button
                  key={avatar.id}
                  type="button"
                  onClick={() => {
                    onAvatarSelect(avatar.id);
                    setShowSelector(false);
                  }}
                  className={`flex items-center gap-2 p-2 rounded-lg text-left transition-colors ${
                    selectedAvatar === avatar.id
                      ? 'bg-gorkhon-pink/10 border-2 border-gorkhon-pink'
                      : 'hover:bg-gray-50 border-2 border-transparent'
                  }`}
                >
                  <div className="text-2xl">{avatar.emoji}</div>
                  <div className="text-sm font-medium text-gray-700">{avatar.name}</div>
                </button>
              ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AvatarSelector;