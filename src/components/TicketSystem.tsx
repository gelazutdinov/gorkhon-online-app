import { useState, useEffect, useRef } from 'react';
import { UserProfile } from '@/hooks/useUser';
import Icon from '@/components/ui/icon';

interface TicketSystemProps {
  user: UserProfile;
}

interface Ticket {
  id: string;
  userId: string;
  subject: string;
  description: string;
  category: 'technical' | 'account' | 'billing' | 'general';
  priority: 'low' | 'medium' | 'high';
  status: 'open' | 'in_progress' | 'resolved' | 'closed';
  createdAt: string;
  updatedAt: string;
  messages: TicketMessage[];
}

interface TicketMessage {
  id: string;
  ticketId: string;
  sender: 'user' | 'bot' | 'agent';
  senderName: string;
  content: string;
  timestamp: string;
  isTyping?: boolean;
}

const TicketSystem = ({ user }: TicketSystemProps) => {
  const [tickets, setTickets] = useState<Ticket[]>([]);
  const [activeTicket, setActiveTicket] = useState<Ticket | null>(null);
  const [showCreateTicket, setShowCreateTicket] = useState(false);
  const [newMessage, setNewMessage] = useState('');
  const [isLinaTyping, setIsLinaTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç
  const [newTicket, setNewTicket] = useState({
    subject: '',
    description: '',
    category: 'general' as const,
    priority: 'medium' as const
  });

  // –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –õ–∏–Ω–∞
  const botKnowledge = {
    greetings: [
      '–ü—Ä–∏–≤–µ—Ç! –Ø –õ–∏–Ω–∞, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ì–æ—Ä—Ö–æ–Ω. –ö–∞–∫ –¥–µ–ª–∞? üëã',
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–∏–Ω–∞, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! üòä',
      '–ü—Ä–∏–≤–µ—Ç! –õ–∏–Ω–∞ –Ω–∞ —Å–≤—è–∑–∏! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —Å —á–µ–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? ‚ú®'
    ],
    technical: {
      '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç': '–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç! üòî –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è. –ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (Ctrl+F5) –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞.',
      '–æ—à–∏–±–∫–∞': '–û–π, –æ—à–∏–±–∫–∏ - —ç—Ç–æ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ! üîß –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É.',
      '–º–µ–¥–ª–µ–Ω–Ω–æ': '–î–∞, –º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç! ‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ª–∏—à–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
      '–Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è': '–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π? üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ, —è –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ –∞–≥–µ–Ω—Ç–∞!',
      '–ø–∞—Ä–æ–ª—å': '–° –ø–∞—Ä–æ–ª—è–º–∏ –±—ã–≤–∞—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏! üîë –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –Ω–∞—à –∞–≥–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø.'
    },
    account: {
      '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è': '–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è! üéâ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã –∏–º—è, email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–∫–∏–º-—Ç–æ –∏–∑ –ø–æ–ª–µ–π?',
      '–ø—Ä–æ—Ñ–∏–ª—å': '–ü—Ä–æ—Ñ–∏–ª—å - —ç—Ç–æ –≤–∞—à–µ –ª–∏—Ü–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ! üë§ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
      '–¥—Ä—É–∑—å—è': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! üë• –ò—â–∏—Ç–µ –ª—é–¥–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è, –æ–±—â–∞–π—Ç–µ—Å—å. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–∏—Å–∫–æ–º?',
      '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏': '–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ –º–Ω–æ–≥–æ–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å! ‚öôÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å, —Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏—â–µ—Ç–µ?'
    },
    general: {
      '–∫–∞–∫': '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! ü§î –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å. –ú–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ?',
      '–≥–¥–µ': '–ò—â–µ—Ç–µ —á—Ç–æ-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ? üîç –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏!',
      '–∫–æ–≥–¥–∞': '–í—Ä–µ–º—è - –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä! ‚è∞ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –æ –∫–∞–∫–∏—Ö —Å—Ä–æ–∫–∞—Ö —Ä–µ—á—å?',
      '–ø–æ—á–µ–º—É': '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üßê –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤ –ø—Ä–∏—á–∏–Ω–∞—Ö. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ.',
      '—Å–ø–∞—Å–∏–±–æ': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å! üòä –ï—Å–ª–∏ –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!',
      '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const savedTickets = localStorage.getItem(`tickets_${user.id}`);
    if (savedTickets) {
      setTickets(JSON.parse(savedTickets));
    }
  }, [user.id]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [activeTicket?.messages, isLinaTyping]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
  const createTicket = () => {
    if (!newTicket.subject.trim() || !newTicket.description.trim()) return;

    const ticket: Ticket = {
      id: Date.now().toString(),
      userId: user.id,
      subject: newTicket.subject,
      description: newTicket.description,
      category: newTicket.category,
      priority: newTicket.priority,
      status: 'open',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      messages: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –õ–∏–Ω—ã
    const welcomeMessage: TicketMessage = {
      id: Date.now().toString(),
      ticketId: ticket.id,
      sender: 'bot',
      senderName: '–õ–∏–Ω–∞ ü§ñ',
      content: botKnowledge.greetings[Math.floor(Math.random() * botKnowledge.greetings.length)],
      timestamp: new Date().toISOString()
    };

    ticket.messages = [welcomeMessage];

    const updatedTickets = [ticket, ...tickets];
    setTickets(updatedTickets);
    localStorage.setItem(`tickets_${user.id}`, JSON.stringify(updatedTickets));

    setActiveTicket(ticket);
    setShowCreateTicket(false);
    setNewTicket({
      subject: '',
      description: '',
      category: 'general',
      priority: 'medium'
    });
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = () => {
    if (!newMessage.trim() || !activeTicket) return;

    const message: TicketMessage = {
      id: Date.now().toString(),
      ticketId: activeTicket.id,
      sender: 'user',
      senderName: user.name,
      content: newMessage,
      timestamp: new Date().toISOString()
    };

    const updatedTicket = {
      ...activeTicket,
      messages: [...activeTicket.messages, message],
      updatedAt: new Date().toISOString()
    };

    setActiveTicket(updatedTicket);
    setNewMessage('');

    // –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç –õ–∏–Ω—ã
    setTimeout(() => {
      setIsLinaTyping(true);
      setTimeout(() => {
        const botResponse = generateBotResponse(newMessage);
        const botMessage: TicketMessage = {
          id: (Date.now() + 1).toString(),
          ticketId: activeTicket.id,
          sender: 'bot',
          senderName: '–õ–∏–Ω–∞ ü§ñ',
          content: botResponse,
          timestamp: new Date().toISOString()
        };

        const finalTicket = {
          ...updatedTicket,
          messages: [...updatedTicket.messages, botMessage],
          updatedAt: new Date().toISOString()
        };

        setActiveTicket(finalTicket);
        
        const updatedTickets = tickets.map(t => 
          t.id === activeTicket.id ? finalTicket : t
        );
        setTickets(updatedTickets);
        localStorage.setItem(`tickets_${user.id}`, JSON.stringify(updatedTickets));
        
        setIsLinaTyping(false);
      }, 1500);
    }, 500);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
  const generateBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    for (const [category, responses] of Object.entries(botKnowledge)) {
      if (category === 'greetings') continue;
      
      for (const [keyword, response] of Object.entries(responses as Record<string, string>)) {
        if (message.includes(keyword)) {
          return response;
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    for (const [keyword, response] of Object.entries(botKnowledge.general)) {
      if (message.includes(keyword)) {
        return response;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∞–≥–µ–Ω—Ç
    const agentKeywords = ['–∞–≥–µ–Ω—Ç', '—á–µ–ª–æ–≤–µ–∫', '–æ–ø–µ—Ä–∞—Ç–æ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Å–ª–æ–∂–Ω–æ', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–ø–æ–º–æ—â—å'];
    if (agentKeywords.some(keyword => message.includes(keyword))) {
      return `–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π! üòä –°–µ–π—á–∞—Å –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—Å –Ω–∞ –∂–∏–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. \n\nüìã **–î–ª—è —Å–≤—è–∑–∏ —Å –∞–≥–µ–Ω—Ç–æ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:** \nhttps://forms.gorkhon.dev/support?ticket=${activeTicket?.id}\n\n–ù–∞—à –∞–≥–µ–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!`;
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    const defaultResponses = [
      '–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ? –ò–ª–∏ –º–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –∞–≥–µ–Ω—Ç–æ–º?',
      '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä –Ø —Å—Ç–∞—Ä–∞—é—Å—å –∏–∑—É—á–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–≥–µ–Ω—Ç–∞ - –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ!',
      '–ü–æ–Ω—è—Ç–Ω–æ! üí≠ –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ. –ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø–æ—à–∞–≥–æ–≤–æ?',
      '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üåü –ï—Å–ª–∏ –º–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ –∞–≥–µ–Ω—Ç–∞!'
    ];

    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technical': return 'Settings';
      case 'account': return 'User';
      case 'billing': return 'CreditCard';
      default: return 'MessageSquare';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-red-600 bg-red-50';
      case 'medium': return 'text-yellow-600 bg-yellow-50';
      case 'low': return 'text-green-600 bg-green-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'text-blue-600 bg-blue-50';
      case 'in_progress': return 'text-yellow-600 bg-yellow-50';
      case 'resolved': return 'text-green-600 bg-green-50';
      case 'closed': return 'text-gray-600 bg-gray-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-800">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</h2>
          <p className="text-gray-600">–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã</p>
        </div>
        <button
          onClick={() => setShowCreateTicket(true)}
          className="px-4 py-2 bg-gorkhon-pink text-white rounded-lg hover:bg-gorkhon-pink/90 transition-colors flex items-center gap-2"
        >
          <Icon name="Plus" size={16} />
          –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç
        </button>
      </div>

      {/* –õ–∏–Ω–∞ - AI –ø–æ–º–æ—â–Ω–∏–∫ */}
      <div className="bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-xl p-4">
        <div className="flex items-center gap-3 mb-3">
          <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 flex items-center justify-center text-white text-lg">
            ü§ñ
          </div>
          <div>
            <h3 className="font-semibold text-gray-800">–õ–∏–Ω–∞ - –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫</h3>
            <p className="text-sm text-gray-600">–ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å 24/7 —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏</p>
          </div>
        </div>
        <div className="text-sm text-gray-700 space-y-1">
          <p>‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</p>
          <p>‚Ä¢ –ü–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
          <p>‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã</p>
          <p>‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∂–∏–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞</p>
        </div>
      </div>

      <div className="grid lg:grid-cols-3 gap-6">
        {/* –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ */}
        <div className="lg:col-span-1">
          <h3 className="font-semibold text-gray-800 mb-4">–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã ({tickets.length})</h3>
          
          {tickets.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-4xl mb-3">üì®</div>
              <p className="text-gray-500 mb-4">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤</p>
              <button
                onClick={() => setShowCreateTicket(true)}
                className="text-gorkhon-pink hover:text-gorkhon-pink/80 text-sm"
              >
                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∏–∫–µ—Ç
              </button>
            </div>
          ) : (
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {tickets.map(ticket => (
                <div
                  key={ticket.id}
                  onClick={() => setActiveTicket(ticket)}
                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                    activeTicket?.id === ticket.id
                      ? 'border-gorkhon-pink bg-gorkhon-pink/5'
                      : 'border-gray-200 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Icon name={getCategoryIcon(ticket.category)} size={14} className="text-gray-500" />
                      <h4 className="font-medium text-sm text-gray-800 truncate">
                        {ticket.subject}
                      </h4>
                    </div>
                    <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(ticket.status)}`}>
                      {ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : 
                       ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' :
                       ticket.status === 'resolved' ? '–†–µ—à–µ–Ω' : '–ó–∞–∫—Ä—ã—Ç'}
                    </span>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className={`text-xs px-2 py-1 rounded-full ${getPriorityColor(ticket.priority)}`}>
                      {ticket.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' :
                       ticket.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'}
                    </span>
                    <span className="text-xs text-gray-500">
                      {new Date(ticket.updatedAt).toLocaleDateString('ru-RU')}
                    </span>
                  </div>
                  
                  {ticket.messages.length > 0 && (
                    <p className="text-xs text-gray-600 mt-2 truncate">
                      {ticket.messages[ticket.messages.length - 1].content}
                    </p>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –ß–∞—Ç */}
        <div className="lg:col-span-2">
          {activeTicket ? (
            <div className="border border-gray-200 rounded-xl h-96 flex flex-col">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
              <div className="p-4 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-semibold text-gray-800">{activeTicket.subject}</h3>
                    <p className="text-sm text-gray-600">–¢–∏–∫–µ—Ç #{activeTicket.id}</p>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(activeTicket.status)}`}>
                      {activeTicket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : 
                       activeTicket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' :
                       activeTicket.status === 'resolved' ? '–†–µ—à–µ–Ω' : '–ó–∞–∫—Ä—ã—Ç'}
                    </span>
                    <button
                      onClick={() => setActiveTicket(null)}
                      className="p-1 hover:bg-gray-100 rounded text-gray-500"
                    >
                      <Icon name="X" size={16} />
                    </button>
                  </div>
                </div>
              </div>

              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ */}
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-3">
                  <div className="flex items-center gap-2 mb-2">
                    <div className="w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center text-sm">
                      {user.avatar}
                    </div>
                    <div>
                      <p className="font-medium text-sm text-gray-800">{user.name}</p>
                      <p className="text-xs text-gray-500">
                        {new Date(activeTicket.createdAt).toLocaleString('ru-RU')}
                      </p>
                    </div>
                  </div>
                  <p className="text-sm text-gray-700">{activeTicket.description}</p>
                </div>

                {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
                {activeTicket.messages.map(message => (
                  <div
                    key={message.id}
                    className={`flex gap-3 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    {message.sender !== 'user' && (
                      <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 flex items-center justify-center text-white text-sm flex-shrink-0">
                        ü§ñ
                      </div>
                    )}
                    
                    <div className={`max-w-xs ${message.sender === 'user' ? 'bg-gorkhon-pink text-white' : 'bg-gray-100 text-gray-800'} rounded-lg px-3 py-2`}>
                      <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                      <p className={`text-xs mt-1 ${message.sender === 'user' ? 'text-pink-100' : 'text-gray-500'}`}>
                        {new Date(message.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                      </p>
                    </div>
                    
                    {message.sender === 'user' && (
                      <div className="w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center text-sm flex-shrink-0">
                        {user.avatar}
                      </div>
                    )}
                  </div>
                ))}

                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
                {isLinaTyping && (
                  <div className="flex gap-3 justify-start">
                    <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 flex items-center justify-center text-white text-sm">
                      ü§ñ
                    </div>
                    <div className="bg-gray-100 rounded-lg px-3 py-2">
                      <div className="flex items-center gap-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>

              {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
              <div className="p-4 border-t border-gray-200">
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                    disabled={isLinaTyping}
                  />
                  <button
                    onClick={sendMessage}
                    disabled={!newMessage.trim() || isLinaTyping}
                    className="px-4 py-2 bg-gorkhon-pink text-white rounded-lg hover:bg-gorkhon-pink/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Icon name="Send" size={16} />
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="border border-gray-200 rounded-xl h-96 flex items-center justify-center">
              <div className="text-center">
                <div className="text-6xl mb-4">üí¨</div>
                <h3 className="text-lg font-semibold text-gray-800 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç</h3>
                <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ */}
      {showCreateTicket && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl max-w-lg w-full">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-gray-800">–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç</h2>
                <button
                  onClick={() => setShowCreateTicket(false)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <Icon name="X" size={20} className="text-gray-500" />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–µ–º–∞
                  </label>
                  <input
                    type="text"
                    value={newTicket.subject}
                    onChange={(e) => setNewTicket(prev => ({ ...prev, subject: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                    placeholder="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –û–ø–∏—Å–∞–Ω–∏–µ
                  </label>
                  <textarea
                    value={newTicket.description}
                    onChange={(e) => setNewTicket(prev => ({ ...prev, description: e.target.value }))}
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                    placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    </label>
                    <select
                      value={newTicket.category}
                      onChange={(e) => setNewTicket(prev => ({ ...prev, category: e.target.value as any }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                    >
                      <option value="general">–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã</option>
                      <option value="technical">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</option>
                      <option value="account">–ê–∫–∫–∞—É–Ω—Ç</option>
                      <option value="billing">Billing</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    </label>
                    <select
                      value={newTicket.priority}
                      onChange={(e) => setNewTicket(prev => ({ ...prev, priority: e.target.value as any }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                    >
                      <option value="low">–ù–∏–∑–∫–∏–π</option>
                      <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                      <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                    </select>
                  </div>
                </div>
              </div>

              <div className="flex gap-3 mt-6">
                <button
                  onClick={() => setShowCreateTicket(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={createTicket}
                  disabled={!newTicket.subject.trim() || !newTicket.description.trim()}
                  className="flex-1 px-4 py-2 bg-gorkhon-pink text-white rounded-lg hover:bg-gorkhon-pink/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TicketSystem;