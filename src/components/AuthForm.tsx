import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '@/hooks/useAuth';
import Icon from '@/components/ui/icon';
import { getAutoFillCredentials, saveCredentials, clearCredentials } from '@/utils/rememberMe';

const AuthForm = () => {
  const { register, login } = useAuth();
  const [isLoginMode, setIsLoginMode] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [forceUpdate, setForceUpdate] = useState(0);
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const [rememberMe, setRememberMe] = useState(() => {
    const credentials = getAutoFillCredentials();
    return credentials.rememberMe;
  });

  const [formData, setFormData] = useState(() => {
    const credentials = getAutoFillCredentials();
    
    return {
      name: '',
      email: credentials.email,
      password: credentials.password,
      birthDate: '',
      gender: 'male' as 'male' | 'female'
    };
  });

  const [acceptedTerms, setAcceptedTerms] = useState(false);
  const [acceptedPrivacy, setAcceptedPrivacy] = useState(false);

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
  useEffect(() => {
    console.log('üîÑ useEffect —Å—Ä–∞–±–æ—Ç–∞–ª:', { isLoginMode, rememberMe });
    
    if (isLoginMode) {
      const credentials = getAutoFillCredentials();
      console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ useEffect:', credentials);
      
      if (credentials.email || credentials.password) {
        setFormData(prev => ({
          ...prev,
          email: credentials.email,
          password: credentials.password
        }));
        setRememberMe(credentials.rememberMe);
        console.log('‚úÖ –§–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ useEffect');
      }
    }
  }, [isLoginMode]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const credentials = getAutoFillCredentials();
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', credentials);
    
    if (credentials.email || credentials.password) {
      setFormData(prev => ({
        ...prev,
        email: credentials.email,
        password: credentials.password
      }));
      setRememberMe(credentials.rememberMe);
    }
  }, []);

  const validateForm = () => {
    if (!formData.email.trim()) return '–í–≤–µ–¥–∏—Ç–µ email';
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    if (!formData.password.trim()) return '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
    if (formData.password.length < 6) return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';

    if (!isLoginMode) {
      if (!formData.name.trim()) return '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
      if (!formData.birthDate) return '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è';
      if (!acceptedTerms) return '–ü—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è';
      if (!acceptedPrivacy) return '–ü—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏';
    }

    return null;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }

    setIsLoading(true);

    try {
      if (isLoginMode) {
        const result = await login({
          email: formData.email,
          password: formData.password,
          rememberMe: rememberMe
        });

        if (result.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
          saveCredentials(formData.email, formData.password, rememberMe);
          
          // –î–£–ë–õ–ò–†–£–ï–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ localStorage –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
          if (rememberMe) {
            localStorage.setItem('savedEmail', formData.email);
            localStorage.setItem('savedPassword', formData.password);  
            localStorage.setItem('rememberMe', 'true');
            console.log('üíæ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', {
              email: formData.email,
              password: '***',
              success: true
            });
          }
          
          setSuccess('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
        } else {
          setError(result.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
        }
      } else {
        const result = await register({
          name: formData.name,
          email: formData.email,
          password: formData.password,
          birthDate: formData.birthDate,
          gender: formData.gender
        });

        if (result.success) {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          saveCredentials(formData.email, formData.password, true);
          setSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
        } else {
          setError(result.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    setError('');
  };

  return (
    <div key={forceUpdate} className="max-w-md mx-auto bg-white rounded-xl shadow-lg p-6 space-y-6">
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
      <div className="p-3 bg-gray-50 border border-gray-200 rounded-lg text-xs">
        <strong>üîß –û—Ç–ª–∞–¥–∫–∞ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è":</strong>
        <div className="mt-1 space-y-1">
          <div>savedEmail: {localStorage.getItem('savedEmail') || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</div>
          <div>savedPassword: {localStorage.getItem('savedPassword') ? '***' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</div>
          <div>rememberMe: {localStorage.getItem('rememberMe') || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</div>
          <div>formData.email: {formData.email || '–ø—É—Å—Ç–æ–µ'}</div>
          <div>formData.password: {formData.password ? '***' : '–ø—É—Å—Ç–æ–µ'}</div>
          <div>rememberMe state: {rememberMe.toString()}</div>
        </div>
        <div className="flex gap-1 mt-2 flex-wrap">
          <button
            type="button"
            onClick={() => {
              const credentials = getAutoFillCredentials();
              console.log('üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ:', {
                localStorage: {
                  savedEmail: localStorage.getItem('savedEmail'),
                  savedPassword: localStorage.getItem('savedPassword'),
                  rememberMe: localStorage.getItem('rememberMe')
                },
                credentials,
                formData,
                rememberMeState: rememberMe
              });
            }}
            className="px-2 py-1 bg-blue-500 text-white text-xs rounded"
          >
            –õ–æ–≥
          </button>
          <button
            type="button"
            onClick={() => {
              console.log('üß™ –¢–ï–°–¢: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
              saveCredentials('test@example.com', 'test123', true);
              
              console.log('üìä –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è localStorage:', {
                email: localStorage.getItem('savedEmail'),
                password: localStorage.getItem('savedPassword'),
                rememberMe: localStorage.getItem('rememberMe')
              });
              
              const newCredentials = getAutoFillCredentials();
              console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', newCredentials);
              
              setFormData(prev => {
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º formData —Å:', prev, '–Ω–∞:', {
                  ...prev,
                  email: newCredentials.email,
                  password: newCredentials.password
                });
                
                return {
                  ...prev,
                  email: newCredentials.email,
                  password: newCredentials.password
                };
              });
              
              setRememberMe(newCredentials.rememberMe);
              setForceUpdate(prev => prev + 1);
              console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
            }}
            className="px-2 py-1 bg-green-500 text-white text-xs rounded"
          >
            –¢–µ—Å—Ç
          </button>
          <button
            type="button"
            onClick={() => {
              const credentials = getAutoFillCredentials();
              console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:', credentials);
              
              setFormData(prev => ({
                ...prev,
                email: credentials.email,
                password: credentials.password
              }));
              setRememberMe(credentials.rememberMe);
              setForceUpdate(prev => prev + 1);
            }}
            className="px-2 py-1 bg-orange-500 text-white text-xs rounded"
          >
            –ó–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
          <button
            type="button"
            onClick={() => {
              clearCredentials();
              setFormData(prev => ({
                ...prev,
                email: '',
                password: ''
              }));
              setRememberMe(false);
            }}
            className="px-2 py-1 bg-red-500 text-white text-xs rounded"
          >
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
          <button
            type="button"
            onClick={() => {
              console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
              window.location.reload();
            }}
            className="px-2 py-1 bg-purple-500 text-white text-xs rounded"
          >
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
        <div className="mt-2 text-xs text-gray-600">
          <div>üîç <strong>–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:</strong></div>
          <div>1. –ù–∞–∂–º–∏ "–¢–µ—Å—Ç" ‚Üí –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—Ç—Å—è</div>
          <div>2. –ù–∞–∂–º–∏ "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å" ‚Üí –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏</div>
          <div>3. –ò–ª–∏ –≤–æ–π–¥–∏ —Ä–µ–∞–ª—å–Ω–æ —Å –≥–∞–ª–æ—á–∫–æ–π "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"</div>
        </div>
      </div>

      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900">
          {isLoginMode ? '–í—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å' : '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'}
        </h2>
        <p className="text-gray-600 mt-2">
          {isLoginMode ? '–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π'}
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Email */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Email <span className="text-red-500">*</span>
            {formData.email && (
              <span className="ml-2 text-xs text-green-600 bg-green-50 px-2 py-0.5 rounded-full">
                ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ
              </span>
            )}
          </label>
          <input
            type="email"
            value={formData.email}
            onChange={(e) => handleInputChange('email', e.target.value)}
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
              formData.email ? 'border-green-300 bg-green-50/30' : 'border-gray-300'
            }`}
            placeholder="your@email.com"
            required
          />
        </div>

        {/* –ü–∞—Ä–æ–ª—å */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ü–∞—Ä–æ–ª—å <span className="text-red-500">*</span>
            {formData.password && (
              <span className="ml-2 text-xs text-green-600 bg-green-50 px-2 py-0.5 rounded-full">
                ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ
              </span>
            )}
          </label>
          <input
            type="password"
            value={formData.password}
            onChange={(e) => handleInputChange('password', e.target.value)}
            className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
              formData.password ? 'border-green-300 bg-green-50/30' : 'border-gray-300'
            }`}
            placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            required
          />
        </div>

        {/* –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        {!isLoginMode && (
          <>
            {/* –ò–º—è */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ò–º—è <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="–í–∞—à–µ –∏–º—è"
                required
              />
            </div>



            {/* –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è <span className="text-red-500">*</span>
              </label>
              <input
                type="date"
                value={formData.birthDate}
                onChange={(e) => handleInputChange('birthDate', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>

            {/* –ü–æ–ª */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–ü–æ–ª</label>
              <div className="flex gap-4">
                <label className="flex items-center cursor-pointer">
                  <input
                    type="radio"
                    name="gender"
                    value="male"
                    checked={formData.gender === 'male'}
                    onChange={(e) => handleInputChange('gender', e.target.value)}
                    className="mr-2"
                  />
                  <span className="text-2xl mr-2">üë®</span>
                  <span>–ú—É–∂—Å–∫–æ–π</span>
                </label>
                <label className="flex items-center cursor-pointer">
                  <input
                    type="radio"
                    name="gender"
                    value="female"
                    checked={formData.gender === 'female'}
                    onChange={(e) => handleInputChange('gender', e.target.value)}
                    className="mr-2"
                  />
                  <span className="text-2xl mr-2">üë©</span>
                  <span>–ñ–µ–Ω—Å–∫–∏–π</span>
                </label>
              </div>
            </div>

            {/* –ß–µ–∫–±–æ–∫—Å—ã —Å–æ–≥–ª–∞—Å–∏—è */}
            <div className="space-y-2">
              <label className="flex items-start cursor-pointer">
                <input
                  type="checkbox"
                  checked={acceptedTerms}
                  onChange={(e) => setAcceptedTerms(e.target.checked)}
                  className="mr-2 mt-1"
                  required
                />
                <span className="text-sm text-gray-600">
                  –Ø –ø—Ä–∏–Ω–∏–º–∞—é{' '}
                  <Link to="/terms" className="text-blue-600 hover:underline">
                    —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                  </Link>
                </span>
              </label>

              <label className="flex items-start cursor-pointer">
                <input
                  type="checkbox"
                  checked={acceptedPrivacy}
                  onChange={(e) => setAcceptedPrivacy(e.target.checked)}
                  className="mr-2 mt-1"
                  required
                />
                <span className="text-sm text-gray-600">
                  –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å{' '}
                  <Link to="/privacy" className="text-blue-600 hover:underline">
                    –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                  </Link>
                </span>
              </label>
            </div>
          </>
        )}

        {/* –ß–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥–∞ */}
        {isLoginMode && (
          <>
            <div className="flex items-center justify-between">
              <label className="flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={rememberMe}
                  onChange={(e) => setRememberMe(e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è</span>
              </label>
              <button
                type="button"
                className="text-sm text-blue-600 hover:text-blue-700 hover:underline"
                onClick={() => {
                  // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                  localStorage.removeItem('savedEmail');
                  localStorage.removeItem('savedPassword');
                  localStorage.removeItem('rememberMe');
                  setFormData(prev => ({
                    ...prev,
                    email: '',
                    password: ''
                  }));
                  setRememberMe(false);
                }}
              >
                –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </button>
            </div>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–∏ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" */}
            {rememberMe && (
              <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-start gap-2">
                  <Icon name="Info" className="w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0" />
                  <div className="text-sm text-blue-700">
                    <strong>–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω–æ.</strong>
                    <br />
                    –í–∞—à–∏ email –∏ –ø–∞—Ä–æ–ª—å –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ. 
                    –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
                  </div>
                </div>
              </div>
            )}
          </>
        )}

        {/* –û—à–∏–±–∫–∏ –∏ —É—Å–ø–µ—Ö */}
        {error && (
          <div className="p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2">
            <Icon name="AlertCircle" className="w-4 h-4 text-red-500" />
            <span className="text-red-700 text-sm">{error}</span>
          </div>
        )}

        {success && (
          <div className="p-3 bg-green-50 border border-green-200 rounded-lg flex items-center gap-2">
            <Icon name="CheckCircle" className="w-4 h-4 text-green-500" />
            <span className="text-green-700 text-sm">{success}</span>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
        <button
          type="submit"
          disabled={isLoading}
          className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white font-medium py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2"
        >
          {isLoading ? (
            <>
              <Icon name="Loader2" className="w-4 h-4 animate-spin" />
              {isLoginMode ? '–í—Ö–æ–¥...' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...'}
            </>
          ) : (
            isLoginMode ? '–í–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'
          )}
        </button>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ */}
        <div className="text-center">
          <button
            type="button"
            onClick={() => {
              setIsLoginMode(!isLoginMode);
              setError('');
              setSuccess('');
            }}
            className="text-blue-600 hover:underline text-sm"
          >
            {isLoginMode ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default AuthForm;