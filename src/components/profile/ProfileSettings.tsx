import { useState, useRef } from 'react';
import Icon from '@/components/ui/icon';
import { UserProfile } from '@/hooks/useUser';

interface ProfileSettingsProps {
  user: UserProfile;
  onUserUpdate?: (user: UserProfile) => void;
  onClose: () => void;
}

const ProfileSettings = ({ user, onUserUpdate, onClose }: ProfileSettingsProps) => {
  const [selectedAvatar, setSelectedAvatar] = useState(() => {
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (base64), —Ç–æ selectedAvatar –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç—Ç–∏–º —Ñ–æ—Ç–æ
    if (user.avatar && user.avatar.startsWith('data:')) {
      return user.avatar;
    }
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º avatar ID –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return user.avatar || 'default_male';
  });
  
  const [customAvatar, setCustomAvatar] = useState<string>(() => {
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ customAvatar
    return user.avatar && user.avatar.startsWith('data:') ? user.avatar : '';
  });
  const [name, setName] = useState(user.name);
  const [email, setEmail] = useState(user.email);
  const [phone, setPhone] = useState(user.phone);
  const [birthDate, setBirthDate] = useState(user.birthDate || '');
  const fileInputRef = useRef<HTMLInputElement>(null);

  const avatarOptions = [
    { id: 'default_male', emoji: 'üë®', label: '–ú—É–∂—á–∏–Ω–∞' },
    { id: 'default_female', emoji: 'üë©', label: '–ñ–µ–Ω—â–∏–Ω–∞' },
    { id: 'businessman', emoji: 'üë®‚Äçüíº', label: '–ë–∏–∑–Ω–µ—Å–º–µ–Ω' },
    { id: 'businesswoman', emoji: 'üë©‚Äçüíº', label: '–ë–∏–∑–Ω–µ—Å–≤—É–º–µ–Ω' },
    { id: 'worker', emoji: 'üë®‚Äçüîß', label: '–†–∞–±–æ—á–∏–π' },
    { id: 'worker_woman', emoji: 'üë©‚Äçüîß', label: '–†–∞–±–æ—á–∞—è' },
    { id: 'farmer', emoji: 'üë®‚Äçüåæ', label: '–§–µ—Ä–º–µ—Ä' },
    { id: 'farmer_woman', emoji: 'üë©‚Äçüåæ', label: '–§–µ—Ä–º–µ—Ä—à–∞' },
    { id: 'teacher', emoji: 'üë®‚Äçüè´', label: '–£—á–∏—Ç–µ–ª—å' },
    { id: 'teacher_woman', emoji: 'üë©‚Äçüè´', label: '–£—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞' },
    { id: 'doctor', emoji: 'üë®‚Äç‚öïÔ∏è', label: '–í—Ä–∞—á' },
    { id: 'doctor_woman', emoji: 'üë©‚Äç‚öïÔ∏è', label: '–í—Ä–∞—á' },
    { id: 'artist', emoji: 'üë®‚Äçüé®', label: '–•—É–¥–æ–∂–Ω–∏–∫' },
    { id: 'artist_woman', emoji: 'üë©‚Äçüé®', label: '–•—É–¥–æ–∂–Ω–∏—Ü–∞' },
    { id: 'oldman', emoji: 'üë¥', label: '–ü–æ–∂–∏–ª–æ–π –º—É–∂—á–∏–Ω–∞' },
    { id: 'oldwoman', emoji: 'üëµ', label: '–ü–æ–∂–∏–ª–∞—è –∂–µ–Ω—â–∏–Ω–∞' }
  ];

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
        return;
      }
      
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        console.log('Image loaded, size:', result.length);
        setCustomAvatar(result);
        setSelectedAvatar(result); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
        console.log('Custom avatar set:', result.substring(0, 50) + '...');
      };
      reader.onerror = () => {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSave = () => {
    const finalAvatar = customAvatar || selectedAvatar;
    
    try {
      console.log('Saving profile with avatar:', finalAvatar ? 'Custom image' : 'Default avatar');
      
      const updates = {
        name,
        email,
        phone,
        birthDate: birthDate || '',
        avatar: finalAvatar,
      };
      
      console.log('Profile updates:', updates);
      
      if (onUserUpdate) {
        const updatedUser: UserProfile = {
          ...user,
          ...updates
        };
        onUserUpdate(updatedUser);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        localStorage.setItem('gorkhon_user_profile', JSON.stringify(updatedUser));
        console.log('Profile saved to localStorage');
      }
      
      onClose();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  };

  const getCurrentAvatarDisplay = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ customAvatar, –ø–æ—Ç–æ–º selectedAvatar
    if (customAvatar) {
      return (
        <img 
          src={customAvatar} 
          alt="–ê–≤–∞—Ç–∞—Ä" 
          className="w-full h-full object-cover rounded-full"
        />
      );
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä - —ç—Ç–æ base64 —Å—Ç—Ä–æ–∫–∞ (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ)
    if (selectedAvatar && selectedAvatar.startsWith('data:')) {
      return (
        <img 
          src={selectedAvatar} 
          alt="–ê–≤–∞—Ç–∞—Ä" 
          className="w-full h-full object-cover rounded-full"
        />
      );
    }
    
    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏
    const avatarOption = avatarOptions.find(option => option.id === selectedAvatar);
    return (
      <span className="text-4xl">
        {avatarOption?.emoji || 'üë§'}
      </span>
    );
  };

  return (
    <div className="bg-white/90 backdrop-blur-xl rounded-2xl w-full max-w-md max-h-[90vh] overflow-y-auto shadow-2xl border border-white/20">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <Icon name="X" size={20} className="text-gray-500" />
          </button>
        </div>

        <div className="p-6 space-y-6">
          {/* –ê–≤–∞—Ç–∞—Ä */}
          <div className="text-center">
            <div className="w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center overflow-hidden">
              {getCurrentAvatarDisplay()}
            </div>
            
            {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ */}
            <div className="space-y-3">
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="hidden"
              />
              <button
                onClick={() => fileInputRef.current?.click()}
                className="w-full flex items-center justify-center gap-2 py-2 px-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <Icon name="Camera" size={18} />
                <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ</span>
              </button>
              
              {/* –°–µ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ */}
              <div className="grid grid-cols-4 gap-2">
                {avatarOptions.map((option) => (
                  <button
                    key={option.id}
                    onClick={() => {
                      setSelectedAvatar(option.id);
                      setCustomAvatar('');
                    }}
                    className={`p-3 rounded-lg border-2 transition-all hover:scale-105 backdrop-blur-sm ${
                      selectedAvatar === option.id && !selectedAvatar.startsWith('data:')
                        ? 'border-gorkhon-pink bg-gorkhon-pink/10'
                        : 'border-white/30 bg-white/50 hover:border-white/50 hover:bg-white/70'
                    }`}
                  >
                    <span className="text-2xl">{option.emoji}</span>
                  </button>
                ))}
              </div>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ */}
              {customAvatar && (
                <div className="mt-4 p-3 bg-gorkhon-green/10 rounded-lg border border-gorkhon-green/20">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Icon name="Camera" size={16} className="text-gorkhon-green" />
                      <span className="text-sm text-gorkhon-green font-medium">–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∞—à–µ —Ñ–æ—Ç–æ</span>
                    </div>
                    <button
                      onClick={() => {
                        setCustomAvatar('');
                        setSelectedAvatar('default_male');
                      }}
                      className="text-sm text-red-600 hover:text-red-700 underline"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ò–º—è
              </label>
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                placeholder="–í–∞—à–µ –∏–º—è"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                placeholder="email@example.com"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–µ–ª–µ—Ñ–æ–Ω
              </label>
              <input
                type="tel"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
                placeholder="+7 (999) 123-45-67"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
              </label>
              <input
                type="date"
                value={birthDate}
                onChange={(e) => setBirthDate(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gorkhon-pink focus:border-transparent"
              />
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-3 pt-4">
            <button
              onClick={onClose}
              className="flex-1 py-3 px-4 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              onClick={handleSave}
              className="flex-1 py-3 px-4 bg-gradient-to-r from-gorkhon-pink to-gorkhon-green text-white rounded-lg hover:shadow-lg transition-all font-medium"
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>
    </div>
  );
};

export default ProfileSettings;