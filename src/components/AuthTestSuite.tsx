import { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import Icon from '@/components/ui/icon';

const AuthTestSuite = () => {
  const { register, login, logout } = useAuth();
  const [testResults, setTestResults] = useState<string[]>([]);
  const [isRunning, setIsRunning] = useState(false);

  const log = (message: string) => {
    console.log(message);
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const clearLogs = () => {
    setTestResults([]);
    localStorage.clear();
    log('üßπ localStorage –æ—á–∏—â–µ–Ω');
  };

  const runTest = async () => {
    setIsRunning(true);
    setTestResults([]);
    
    try {
      // –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞
      localStorage.clear();
      log('üßπ localStorage –æ—á–∏—â–µ–Ω');

      // –®–∞–≥ 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      log('üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
      const regResult = await register({
        email: 'test-user@example.com',
        password: 'password123',
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –Æ–∑–µ—Ä',
        birthDate: '1990-01-01'
      });

      if (regResult.success) {
        log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        const savedRegData = localStorage.getItem('registrationData');
        if (savedRegData) {
          const parsedData = JSON.parse(savedRegData);
          log(`üíæ –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${parsedData.email} / ${parsedData.password}`);
        } else {
          log('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ù–ï —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
        }
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${regResult.error}`);
        return;
      }

      // –®–∞–≥ 3: –í—ã—Ö–æ–¥
      await logout();
      log('üö™ –í—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');

      // –®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
      log('üîê –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
      const loginResult = await login({
        email: 'test-user@example.com',
        password: 'password123',
        rememberMe: true
      });

      if (loginResult.success) {
        log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        const savedEmail = localStorage.getItem('savedEmail');
        const savedPassword = localStorage.getItem('savedPassword');
        const rememberMe = localStorage.getItem('rememberMe');
        
        log(`üíæ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: email=${savedEmail}, password=${savedPassword ? '***' : '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'}, remember=${rememberMe}`);
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${loginResult.error}`);
      }

      // –®–∞–≥ 5: –¢–µ—Å—Ç –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
      await logout();
      log('üö™ –°–Ω–æ–≤–∞ –≤—ã—à–ª–∏');
      
      log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ...');
      const autoFillEmail = localStorage.getItem('savedEmail');
      const autoFillPassword = localStorage.getItem('savedPassword');
      
      if (autoFillEmail && autoFillPassword) {
        log(`‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${autoFillEmail} / ***`);
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –≤—Ö–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const finalLogin = await login({
          email: autoFillEmail,
          password: autoFillPassword,
          rememberMe: true
        });
        
        if (finalLogin.success) {
          log('üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–®–ï–õ! –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
          log(`‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${finalLogin.error}`);
        }
      } else {
        log('‚ùå –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }

    } catch (error) {
      log(`üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error}`);
    } finally {
      setIsRunning(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <div className="mb-4">
        <h2 className="text-xl font-bold mb-2">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
        <p className="text-gray-600 text-sm">–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –í—ã—Ö–æ–¥ ‚Üí –í—Ö–æ–¥ ‚Üí –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</p>
      </div>

      <div className="flex gap-2 mb-4">
        <button
          onClick={runTest}
          disabled={isRunning}
          className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white px-4 py-2 rounded-lg flex items-center gap-2"
        >
          {isRunning ? (
            <>
              <Icon name="Loader2" className="w-4 h-4 animate-spin" />
              –¢–µ—Å—Ç–∏—Ä—É–µ–º...
            </>
          ) : (
            <>
              <Icon name="Play" className="w-4 h-4" />
              –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
            </>
          )}
        </button>
        
        <button
          onClick={clearLogs}
          className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"
        >
          <Icon name="Trash2" className="w-4 h-4" />
          –û—á–∏—Å—Ç–∏—Ç—å
        </button>
      </div>

      <div className="bg-gray-50 rounded-lg p-4 max-h-96 overflow-y-auto">
        <h3 className="font-medium mb-2">–õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
        {testResults.length === 0 ? (
          <p className="text-gray-500 text-sm">–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç" –¥–ª—è –Ω–∞—á–∞–ª–∞</p>
        ) : (
          <div className="space-y-1">
            {testResults.map((result, index) => (
              <div 
                key={index} 
                className={`text-sm font-mono p-2 rounded ${
                  result.includes('‚úÖ') ? 'bg-green-100 text-green-800' :
                  result.includes('‚ùå') ? 'bg-red-100 text-red-800' :
                  result.includes('üéâ') ? 'bg-purple-100 text-purple-800' :
                  'bg-gray-100'
                }`}
              >
                {result}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AuthTestSuite;