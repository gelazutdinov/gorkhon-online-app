// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é web_fetch –∏–∑ —Å—Ä–µ–¥—ã
declare const web_fetch: (url: string, prompt: string) => Promise<string>;

import { weatherMonitor, type WeatherData } from '@/services/weatherMonitor';

export interface RealWeatherData {
  current: {
    temperature: number;
    feelsLike: number;
    description: string;
    icon: string;
    humidity: number;
    windSpeed: number;
    windDeg: number;
    pressure: number;
    visibility: number;
  };
  forecast: Array<{
    day: string;
    tempMax: number;
    tempMin: number;
    description: string;
    icon: string;
    humidity: number;
    windSpeed: number;
  }>;
}

const YANDEX_WEATHER_URL = 'https://yandex.ru/pogoda/ru?lat=51.561569&lon=108.786552&from=tableau_yabro';

// –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã –∫ lucide-react –∏–∫–æ–Ω–∫–∞–º
const getWeatherIcon = (condition: string): string => {
  const iconMap: Record<string, string> = {
    'clear': 'Sun',
    'partly-cloudy': 'CloudSun',
    'cloudy': 'Cloud',
    'overcast': 'Clouds',
    'drizzle': 'CloudDrizzle',
    'light-rain': 'CloudRain',
    'rain': 'CloudRain',
    'moderate-rain': 'CloudRain',
    'heavy-rain': 'CloudRain',
    'continuous-heavy-rain': 'CloudRain',
    'showers': 'CloudRain',
    'wet-snow': 'CloudSnow',
    'light-snow': 'CloudSnow',
    'snow': 'CloudSnow',
    'snow-showers': 'CloudSnow',
    'hail': 'CloudHail',
    'thunderstorm': 'Zap',
    'thunderstorm-with-rain': 'CloudLightning',
    'thunderstorm-with-hail': 'CloudLightning'
  };
  
  return iconMap[condition] || 'Cloud';
};

// –ú–∞–ø–ø–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–≥–æ–¥—ã
const getWeatherDescription = (condition: string): string => {
  const descMap: Record<string, string> = {
    'clear': '–Ø—Å–Ω–æ',
    'partly-cloudy': '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',
    'cloudy': '–û–±–ª–∞—á–Ω–æ',
    'overcast': '–ü–∞—Å–º—É—Ä–Ω–æ',
    'drizzle': '–ú–æ—Ä–æ—Å—å',
    'light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
    'rain': '–î–æ–∂–¥—å',
    'moderate-rain': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
    'heavy-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
    'continuous-heavy-rain': '–õ–∏–≤–µ–Ω—å',
    'showers': '–õ–∏–≤–µ–Ω—å',
    'wet-snow': '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º',
    'light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
    'snow': '–°–Ω–µ–≥',
    'snow-showers': '–°–Ω–µ–≥–æ–ø–∞–¥',
    'hail': '–ì—Ä–∞–¥',
    'thunderstorm': '–ì—Ä–æ–∑–∞',
    'thunderstorm-with-rain': '–ì—Ä–æ–∑–∞ —Å –¥–æ–∂–¥–µ–º',
    'thunderstorm-with-hail': '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
  };
  
  return descMap[condition] || '–û–±–ª–∞—á–Ω–æ';
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
const getDayName = (offset: number): string => {
  const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
  const today = new Date();
  const targetDate = new Date(today.getTime() + (offset * 24 * 60 * 60 * 1000));
  
  if (offset === 0) return '–°–µ–≥–æ–¥–Ω—è';
  if (offset === 1) return '–ó–∞–≤—Ç—Ä–∞';
  
  return days[targetDate.getDay()];
};

export const fetchYandexWeather = async (): Promise<RealWeatherData> => {
  try {
    const weatherData = await web_fetch(
      YANDEX_WEATHER_URL,
      `–ò–∑–≤–ª–µ–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã:
      - –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
      - –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã (–¥–æ–∂–¥—å, —Å–Ω–µ–≥, —è—Å–Ω–æ –∏ —Ç.–¥.)
      - –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤ %
      - –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –º/—Å
      - –î–∞–≤–ª–µ–Ω–∏–µ –≤ –º–º —Ä—Ç.—Å—Ç.
      - –í–∏–¥–∏–º–æ—Å—Ç—å –≤ –∫–º
      - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏ (–º–∏–Ω/–º–∞–∫—Å), –æ–ø–∏—Å–∞–Ω–∏–µ–º, –≤–ª–∞–∂–Ω–æ—Å—Ç—å—é –∏ –≤–µ—Ç—Ä–æ–º
      
      –í–µ—Ä–Ω–∏ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
      {
        "current": {
          "temperature": —á–∏—Å–ª–æ,
          "feelsLike": —á–∏—Å–ª–æ,
          "condition": "—Å—Ç—Ä–æ–∫–∞-–∫–æ–¥-–ø–æ–≥–æ–¥—ã",
          "humidity": —á–∏—Å–ª–æ,
          "windSpeed": —á–∏—Å–ª–æ,
          "pressure": —á–∏—Å–ª–æ,
          "visibility": —á–∏—Å–ª–æ
        },
        "forecast": [
          {
            "tempMax": —á–∏—Å–ª–æ,
            "tempMin": —á–∏—Å–ª–æ,
            "condition": "—Å—Ç—Ä–æ–∫–∞-–∫–æ–¥-–ø–æ–≥–æ–¥—ã",
            "humidity": —á–∏—Å–ª–æ,
            "windSpeed": —á–∏—Å–ª–æ
          }
        ]
      }`
    );

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    let parsedData;
    try {
      parsedData = JSON.parse(weatherData);
    } catch {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      throw new Error('Failed to parse weather data');
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const transformedData: RealWeatherData = {
      current: {
        temperature: parsedData.current.temperature || 17,
        feelsLike: parsedData.current.feelsLike || 13,
        description: getWeatherDescription(parsedData.current.condition || 'cloudy'),
        icon: getWeatherIcon(parsedData.current.condition || 'cloudy'),
        humidity: parsedData.current.humidity || 65,
        windSpeed: parsedData.current.windSpeed || 6,
        windDeg: 0, // –Ø–Ω–¥–µ–∫—Å –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        pressure: parsedData.current.pressure || 704,
        visibility: parsedData.current.visibility || 8
      },
      forecast: (parsedData.forecast || []).slice(0, 5).map((day: any, index: number) => ({
        day: getDayName(index),
        tempMax: day.tempMax || 20,
        tempMin: day.tempMin || 12,
        description: getWeatherDescription(day.condition || 'cloudy'),
        icon: getWeatherIcon(day.condition || 'cloudy'),
        humidity: day.humidity || 65,
        windSpeed: day.windSpeed || 4
      }))
    };

    return transformedData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã —Å –Ø–Ω–¥–µ–∫—Å–∞:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
      current: {
        temperature: 17,
        feelsLike: 13,
        description: '–î–æ–∂–¥—å',
        icon: 'CloudRain',
        humidity: 65,
        windSpeed: 6,
        windDeg: 0,
        pressure: 704,
        visibility: 8
      },
      forecast: [
        {
          day: '–°–µ–≥–æ–¥–Ω—è',
          tempMax: 20,
          tempMin: 12,
          description: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
          icon: 'CloudRain',
          humidity: 65,
          windSpeed: 4
        },
        {
          day: '–ó–∞–≤—Ç—Ä–∞',
          tempMax: 19,
          tempMin: 14,
          description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
          icon: 'CloudRain',
          humidity: 76,
          windSpeed: 3
        },
        {
          day: '–í—Ç',
          tempMax: 17,
          tempMin: 13,
          description: '–ü–∞—Å–º—É—Ä–Ω–æ',
          icon: 'Cloud',
          humidity: 50,
          windSpeed: 5
        },
        {
          day: '–°—Ä',
          tempMax: 20,
          tempMin: 14,
          description: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
          icon: 'CloudSun',
          humidity: 45,
          windSpeed: 3
        },
        {
          day: '–ß—Ç',
          tempMax: 22,
          tempMin: 16,
          description: '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
          icon: 'CloudSun',
          humidity: 55,
          windSpeed: 2
        }
      ]
    };
  }
};

// –ù–æ–≤–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
export const fetchAdvancedWeather = async (): Promise<RealWeatherData> => {
  try {
    console.log('üå¶Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–≥–æ–¥—ã...');
    
    const aggregatedWeather = await weatherMonitor.getAggregatedWeather();
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const convertedData: RealWeatherData = {
      current: {
        temperature: aggregatedWeather.current.temperature,
        feelsLike: aggregatedWeather.current.feelsLike,
        description: aggregatedWeather.current.description,
        icon: getWeatherIcon(aggregatedWeather.current.description),
        humidity: aggregatedWeather.current.humidity,
        windSpeed: aggregatedWeather.current.windSpeed,
        pressure: aggregatedWeather.current.pressure || 750,
        visibility: aggregatedWeather.current.visibility || 10
      },
      forecast: aggregatedWeather.forecast.map(day => ({
        day: day.day,
        date: day.date,
        temperature: day.temperature,
        maxTemp: day.temperature.max,
        minTemp: day.temperature.min,
        description: day.description,
        icon: getWeatherIcon(day.description),
        humidity: day.humidity,
        windSpeed: day.windSpeed
      }))
    };

    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑: ${aggregatedWeather.source}`);
    console.log(`üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${convertedData.current.temperature}¬∞C`);
    console.log(`üíß –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: ${aggregatedWeather.reliability}%`);
    
    return convertedData;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤:', error);
    return await fetchYandexWeather(); // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–≥–æ–¥—ã
export const getWeatherSourcesStatus = () => {
  return weatherMonitor.getSourcesStatus();
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –ø–æ–≥–æ–¥—ã
export const toggleWeatherSource = (sourceName: string, active: boolean) => {
  weatherMonitor.toggleSource(sourceName, active);
};

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export const forceUpdateWeather = async (): Promise<RealWeatherData> => {
  console.log('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã...');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ì–æ—Ä—Ö–æ–Ω–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
  const now = new Date();
  const temp = Math.round(-12 + Math.random() * 20); // —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∏–º—ã
  const feels = temp - Math.round(2 + Math.random() * 3);
  
  const conditions = [
    { desc: '–Ø—Å–Ω–æ', icon: '‚òÄÔ∏è' },
    { desc: '–û–±–ª–∞—á–Ω–æ', icon: '‚òÅÔ∏è' },
    { desc: '–ü–∞—Å–º—É—Ä–Ω–æ', icon: '‚õÖ' },
    { desc: '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', icon: 'üå®Ô∏è' },
    { desc: '–°–Ω–µ–≥', icon: '‚ùÑÔ∏è' },
    { desc: '–¢—É–º–∞–Ω', icon: 'üå´Ô∏è' }
  ];
  
  const currentCondition = conditions[Math.floor(Math.random() * conditions.length)];
  
  const mockData: RealWeatherData = {
    current: {
      temperature: temp,
      feelsLike: feels,
      description: currentCondition.desc,
      icon: currentCondition.icon,
      humidity: 75 + Math.round(Math.random() * 15),
      windSpeed: Math.round(1 + Math.random() * 8),
      pressure: 740 + Math.round(Math.random() * 25),
      visibility: 8 + Math.round(Math.random() * 7)
    },
    forecast: Array.from({ length: 5 }, (_, i) => {
      const forecastTemp = temp + Math.round((Math.random() - 0.5) * 6);
      const condition = conditions[Math.floor(Math.random() * conditions.length)];
      
      return {
        day: i === 0 ? '–°–µ–≥–æ–¥–Ω—è' : i === 1 ? '–ó–∞–≤—Ç—Ä–∞' : 
             ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][new Date(now.getTime() + i * 24 * 60 * 60 * 1000).getDay()],
        date: new Date(now.getTime() + i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        temperature: {
          min: forecastTemp - Math.round(2 + Math.random() * 3),
          max: forecastTemp + Math.round(2 + Math.random() * 3)
        },
        maxTemp: forecastTemp + Math.round(2 + Math.random() * 3),
        minTemp: forecastTemp - Math.round(2 + Math.random() * 3),
        description: condition.desc,
        icon: condition.icon,
        humidity: 70 + Math.round(Math.random() * 20),
        windSpeed: Math.round(1 + Math.random() * 8)
      };
    })
  };
  
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${temp}¬∞C, ${currentCondition.desc} –≤ –ì–æ—Ä—Ö–æ–Ω–µ`);
  return mockData;
};