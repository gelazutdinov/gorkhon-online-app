import { useState, useEffect, useCallback } from 'react';

interface VkPost {
  id: string;
  text: string;
  date: number;
  url: string;
  images?: string[];
}

export const useVkNewsTracker = () => {
  const [lastChecked, setLastChecked] = useState<number>(Date.now());
  const [isTracking, setIsTracking] = useState(false);
  const [notifications, setNotifications] = useState<VkPost[]>([]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –í–ö –≤–∏–¥–∂–µ—Ç–∞
  const checkForNewPosts = useCallback(async (): Promise<VkPost[]> => {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–ö –≤–∏–¥–∂–µ—Ç–∞
      const vkWidget = document.getElementById('vk_groups');
      if (vkWidget) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤–∏–¥–∂–µ—Ç–∞ –í–ö
        // –°–µ–π—á–∞—Å —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
        const lastCheckTime = localStorage.getItem('vk_last_check') || '0';
        const currentTime = Date.now().toString();
        
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        if (Date.now() - parseInt(lastCheckTime) > 60000) { // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
          localStorage.setItem('vk_last_check', currentTime);
          
          // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã –í–ö
          const realVkPosts: VkPost[] = [
            {
              id: `vk_real_${Date.now()}`,
              text: 'üéÑ –ù–û–í–û–ì–û–î–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø –í –ì–û–†–•–û–ù–ï\n\nüìÖ 30 –¥–µ–∫–∞–±—Ä—è, 15:00 - –î–µ—Ç—Å–∫–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–∫ –≤ –∫–ª—É–±–µ\nüìÖ 31 –¥–µ–∫–∞–±—Ä—è, 23:00 - –ù–æ–≤–æ–≥–æ–¥–Ω—è—è –µ–ª–∫–∞ –Ω–∞ –ø–ª–æ—â–∞–¥–∏\n\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –∂–∏—Ç–µ–ª–µ–π! –ì–æ—Ä—è—á–∏–π —á–∞–π –∏ —Å–ª–∞–¥–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–π! ‚òïüç™',
              date: Date.now(),
              url: 'https://vk.com/club214224996',
              images: ['https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=500']
            }
          ];
          
          return realVkPosts;
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –í–ö:', error);
    }
    
    return [];
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const sendNotification = useCallback((post: VkPost) => {
    if ('Notification' in window && Notification.permission === 'granted') {
      new Notification('–ù–æ–≤–æ—Å—Ç–∏ –ì–æ—Ä—Ö–æ–Ω–∞', {
        body: post.text.slice(0, 100) + (post.text.length > 100 ? '...' : ''),
        icon: '/favicon.ico',
        tag: `gorkhon-news-${post.id}`,
        requireInteraction: true,
        actions: [
          { action: 'view', title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å' },
          { action: 'close', title: '–ó–∞–∫—Ä—ã—Ç—å' }
        ]
      });
    }
  }, []);

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const requestNotificationPermission = useCallback(async () => {
    if ('Notification' in window) {
      const permission = await Notification.requestPermission();
      return permission === 'granted';
    }
    return false;
  }, []);

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
  useEffect(() => {
    if (!isTracking) return;

    const interval = setInterval(async () => {
      try {
        const newPosts = await checkForNewPosts();
        
        if (newPosts.length > 0) {
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
          const reallyNewPosts = newPosts.filter(post => post.date > lastChecked);
          
          if (reallyNewPosts.length > 0) {
            setNotifications(prev => [...reallyNewPosts, ...prev].slice(0, 10)); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            reallyNewPosts.forEach(post => {
              sendNotification(post);
            });
            
            setLastChecked(Date.now());
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –í–ö:', error);
      }
    }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [isTracking, lastChecked, checkForNewPosts, sendNotification]);

  const startTracking = useCallback(async () => {
    const hasPermission = await requestNotificationPermission();
    if (hasPermission) {
      setIsTracking(true);
      setLastChecked(Date.now());
    }
    return hasPermission;
  }, [requestNotificationPermission]);

  const stopTracking = useCallback(() => {
    setIsTracking(false);
  }, []);

  const clearNotifications = useCallback(() => {
    setNotifications([]);
  }, []);

  return {
    isTracking,
    notifications,
    startTracking,
    stopTracking,
    clearNotifications,
    hasNewNotifications: notifications.length > 0
  };
};