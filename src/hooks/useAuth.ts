import { useState, useEffect, useCallback } from 'react';
import { apiClient } from '@/services/apiClient';

export interface UserProfile {
  id: string;
  email: string;
  name: string;
  middleName?: string;
  phone?: string;
  birthDate?: string;
  avatar?: string;
  role: 'user' | 'admin';
  status: 'active' | 'inactive' | 'banned';
  isVerified: boolean;
  createdAt: string;
  updatedAt: string;
  lastLoginAt?: string;
  loginCount: number;
}

export interface UserRegistrationData {
  email: string;
  password: string;
  name: string;
  middleName?: string;
  phone?: string;
  birthDate?: string;
  gender?: 'male' | 'female';
}

export interface UserLoginData {
  email: string;
  password: string;
}

export const useAuth = () => {
  const [user, setUser] = useState<UserProfile | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadCurrentUser = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –≤–º–µ—Å—Ç–æ —Å–µ—Ä–≤–µ—Ä–∞
        const savedUser = localStorage.getItem('currentUser');
        if (savedUser) {
          setUser(JSON.parse(savedUser));
        }
      } catch (error) {
        console.error('Load user error:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadCurrentUser();
  }, []);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  const register = useCallback(async (data: UserRegistrationData) => {
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
      const mockUser: UserProfile = {
        id: 'mock-user-' + Date.now(),
        email: data.email,
        name: data.name,
        birthDate: data.birthDate,
        role: 'user',
        status: 'active',
        isVerified: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        loginCount: 1
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('currentUser', JSON.stringify(mockUser));
      localStorage.setItem('registrationData', JSON.stringify(data));
      
      setUser(mockUser);
      return { success: true };
    } catch (error) {
      console.error('Registration error:', error);
      return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' };
    }
  }, []);

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  const login = useCallback(async (data: UserLoginData & { rememberMe?: boolean }) => {
    try {
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å:', { email: data.email, password: '***', rememberMe: data.rememberMe });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏
      if (data.email === 'test@example.com' && data.password === 'test123') {
        console.log('‚úÖ –í—Ö–æ–¥ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        
        const testUser: UserProfile = {
          id: 'test-user',
          email: 'test@example.com',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          role: 'user',
          status: 'active',
          isVerified: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          loginCount: 1
        };
        
        localStorage.setItem('currentUser', JSON.stringify(testUser));
        setUser(testUser);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
        if (data.rememberMe) {
          localStorage.setItem('savedEmail', data.email);
          localStorage.setItem('savedPassword', data.password);
          localStorage.setItem('rememberMe', 'true');
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        }
        
        return { success: true };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ localStorage
      const savedData = localStorage.getItem('registrationData');
      if (savedData) {
        const regData = JSON.parse(savedData);
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { 
          savedEmail: regData.email, 
          inputEmail: data.email,
          match: regData.email === data.email && regData.password === data.password
        });
        
        if (regData.email === data.email && regData.password === data.password) {
          const savedUser = localStorage.getItem('currentUser');
          if (savedUser) {
            const user = JSON.parse(savedUser);
            setUser(user);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
            if (data.rememberMe) {
              localStorage.setItem('savedEmail', data.email);
              localStorage.setItem('savedPassword', data.password);
              localStorage.setItem('rememberMe', 'true');
              console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ useAuth');
            } else {
              localStorage.removeItem('savedEmail');
              localStorage.removeItem('savedPassword');
              localStorage.removeItem('rememberMe');
              console.log('üóëÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –≤ useAuth');
            }
            
            return { success: true };
          }
        }
      }
      
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' };
    } catch (error) {
      console.error('Login error:', error);
      return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' };
    }
  }, []);

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const logout = useCallback(async () => {
    try {
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      localStorage.removeItem('currentUser');
      localStorage.removeItem('registrationData');
      localStorage.removeItem('gorkhon_current_user');
      localStorage.removeItem('gorkhon_users');
      
      // –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞ (savedEmail, savedPassword, rememberMe)
      // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      setUser(null);
      
      return { success: true };
    } catch (error) {
      console.error('Logout error:', error);
      return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' };
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  const updateProfile = useCallback(async (updates: Partial<UserProfile>) => {
    if (!user) return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' };

    try {
      const result = await apiClient.updateProfile(updates);
      if (result.success && result.user) {
        setUser(result.user);
        return { success: true };
      }
      return { success: false, error: result.error };
    } catch (error) {
      console.error('Profile update error:', error);
      return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' };
    }
  }, [user]);

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  const changePassword = useCallback(async (currentPassword: string, newPassword: string) => {
    if (!user) return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' };

    try {
      const result = await apiClient.changePassword(currentPassword, newPassword);
      return result;
    } catch (error) {
      console.error('Password change error:', error);
      return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è' };
    }
  }, [user]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const isAdmin = user?.email === 'smm@gelazutdinov.ru' || user?.role === 'admin';

  return {
    user,
    isLoading,
    isLoggedIn: !!user,
    isAdmin,
    register,
    login,
    logout,
    updateProfile,
    changePassword
  };
};