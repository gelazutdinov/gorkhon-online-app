const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ TypeScript —Å–µ—Ä–≤–µ—Ä–∞');
console.log('==========================================\n');

const serverProcess = spawn('node', [path.join(__dirname, 'node_modules', '.bin', 'tsx'), 'src/app.ts'], {
  cwd: path.join(__dirname, 'server'),
  stdio: 'pipe'
});

let output = '';
let hasStarted = false;

serverProcess.stdout.on('data', (data) => {
  const text = data.toString();
  output += text;
  console.log(`[STDOUT] ${text.trim()}`);
  
  if (text.includes('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω')) {
    hasStarted = true;
    console.log('\n‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!');
  }
});

serverProcess.stderr.on('data', (data) => {
  const text = data.toString();
  output += text;
  console.log(`[STDERR] ${text.trim()}`);
});

serverProcess.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
});

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('\n‚è∞ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç...');
  
  if (hasStarted) {
    console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –£–°–ü–ï–• - –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!');
  } else {
    console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏–ª–∏ –Ω–µ –≤—ã–¥–∞–ª –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
  }
  
  console.log('\nüìù –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥:');
  console.log(output || '(–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)');
  
  serverProcess.kill('SIGTERM');
  
  setTimeout(() => {
    process.exit(hasStarted ? 0 : 1);
  }, 1000);
}, 6000);

console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (6 —Å–µ–∫—É–Ω–¥)...');