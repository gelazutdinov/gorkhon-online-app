const http = require('http');
const { spawn } = require('child_process');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          const result = {
            statusCode: res.statusCode,
            headers: res.headers,
            body: body,
            parsedBody: body ? JSON.parse(body) : null
          };
          resolve(result);
        } catch (e) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: body,
            parsedBody: null,
            parseError: e.message
          });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testEndpoints() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...\n');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  const serverProcess = spawn('node', ['test-simple-server.js'], {
    stdio: ['inherit', 'pipe', 'pipe']
  });
  
  let serverLogs = '';
  let serverErrors = '';
  
  serverProcess.stdout.on('data', (data) => {
    const message = data.toString();
    serverLogs += message;
    console.log('üì° –°–µ—Ä–≤–µ—Ä:', message.trim());
  });
  
  serverProcess.stderr.on('data', (data) => {
    const message = data.toString();
    serverErrors += message;
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', message.trim());
  });
  
  // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
  await sleep(2000);
  
  const testResults = {
    serverStarted: false,
    serverLogs: serverLogs,
    serverErrors: serverErrors,
    endpoints: []
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä
  if (serverLogs.includes('–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω')) {
    testResults.serverStarted = true;
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n');
  } else {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!\n');
    serverProcess.kill();
    return testResults;
  }
  
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints...\n');
  
  // –¢–µ—Å—Ç 1: GET /api/health
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET http://localhost:3001/api/health');
  try {
    const healthResult = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/health',
      method: 'GET'
    });
    
    testResults.endpoints.push({
      endpoint: 'GET /api/health',
      status: healthResult.statusCode,
      success: healthResult.statusCode === 200,
      response: healthResult.parsedBody,
      error: healthResult.parseError || null
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${healthResult.statusCode}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, healthResult.parsedBody);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${healthResult.statusCode === 200 ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}\n`);
  } catch (error) {
    testResults.endpoints.push({
      endpoint: 'GET /api/health',
      status: null,
      success: false,
      response: null,
      error: error.message
    });
    console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message}\n`);
  }
  
  // –¢–µ—Å—Ç 2: POST /api/auth/register
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST http://localhost:3001/api/auth/register');
  console.log('   Body: {"email": "test@test.com", "password": "123456", "name": "Test User"}');
  try {
    const registerResult = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/auth/register',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      email: 'test@test.com',
      password: '123456',
      name: 'Test User'
    });
    
    testResults.endpoints.push({
      endpoint: 'POST /api/auth/register',
      status: registerResult.statusCode,
      success: registerResult.statusCode === 200,
      response: registerResult.parsedBody,
      error: registerResult.parseError || null
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${registerResult.statusCode}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, registerResult.parsedBody);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${registerResult.statusCode === 200 ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}\n`);
  } catch (error) {
    testResults.endpoints.push({
      endpoint: 'POST /api/auth/register',
      status: null,
      success: false,
      response: null,
      error: error.message
    });
    console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message}\n`);
  }
  
  // –¢–µ—Å—Ç 3: POST /api/auth/login
  console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST http://localhost:3001/api/auth/login');
  console.log('   Body: {"email": "smm@gelazutdinov.ru", "password": "admin123"}');
  try {
    const loginResult = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      email: 'smm@gelazutdinov.ru',
      password: 'admin123'
    });
    
    testResults.endpoints.push({
      endpoint: 'POST /api/auth/login',
      status: loginResult.statusCode,
      success: loginResult.statusCode === 200,
      response: loginResult.parsedBody,
      error: loginResult.parseError || null
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${loginResult.statusCode}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, loginResult.parsedBody);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${loginResult.statusCode === 200 ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}\n`);
  } catch (error) {
    testResults.endpoints.push({
      endpoint: 'POST /api/auth/login',
      status: null,
      success: false,
      response: null,
      error: error.message
    });
    console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message}\n`);
  }
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞
  console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  serverProcess.kill();
  
  await sleep(1000);
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:');
  console.log('==================');
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: ${testResults.serverStarted ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  console.log(`–í—Å–µ–≥–æ endpoints –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${testResults.endpoints.length}`);
  
  const successfulEndpoints = testResults.endpoints.filter(ep => ep.success);
  console.log(`–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successfulEndpoints.length}/${testResults.endpoints.length}`);
  
  console.log('\n–î–µ—Ç–∞–ª–∏ –ø–æ endpoints:');
  testResults.endpoints.forEach((ep, index) => {
    console.log(`${index + 1}. ${ep.endpoint}: ${ep.success ? '‚úÖ' : '‚ùå'} (${ep.status || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'})`);
    if (ep.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${ep.error}`);
    }
  });
  
  if (testResults.serverErrors) {
    console.log('\n‚ùå –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log(testResults.serverErrors);
  }
  
  return testResults;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testEndpoints().catch(console.error);