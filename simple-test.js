// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è endpoints
const http = require('http');

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...\n');

// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (–µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω)
function testConnection() {
  return new Promise((resolve) => {
    const req = http.request({
      hostname: 'localhost',
      port: 3001,
      path: '/api/health',
      method: 'GET',
      timeout: 1000
    }, (res) => {
      resolve(true);
    });
    
    req.on('error', () => resolve(false));
    req.on('timeout', () => resolve(false));
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          const result = {
            statusCode: res.statusCode,
            headers: res.headers,
            body: body,
            parsedBody: body ? JSON.parse(body) : null
          };
          resolve(result);
        } catch (e) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: body,
            parsedBody: null,
            parseError: e.message
          });
        }
      });
    });

    req.on('error', reject);
    req.setTimeout(5000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function runTests() {
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
  
  const isConnected = await testConnection();
  if (!isConnected) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: node test-simple-server.js');
    return;
  }
  
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç!\n');
  
  const results = [];
  
  // –¢–µ—Å—Ç 1: Health check
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/health...');
  try {
    const healthResult = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/health',
      method: 'GET'
    });
    
    const success = healthResult.statusCode === 200;
    results.push({
      endpoint: 'GET /api/health',
      status: healthResult.statusCode,
      success: success,
      response: healthResult.parsedBody
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${healthResult.statusCode}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(healthResult.parsedBody, null, 2)}`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}\n`);
  } catch (error) {
    results.push({
      endpoint: 'GET /api/health',
      status: null,
      success: false,
      error: error.message
    });
    console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message}\n`);
  }
  
  // –¢–µ—Å—Ç 2: Register
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/auth/register...');
  console.log('   Body: {"email": "test@test.com", "password": "123456", "name": "Test User"}');
  try {
    const registerResult = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/auth/register',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      email: 'test@test.com',
      password: '123456',
      name: 'Test User'
    });
    
    const success = registerResult.statusCode === 200;
    results.push({
      endpoint: 'POST /api/auth/register',
      status: registerResult.statusCode,
      success: success,
      response: registerResult.parsedBody
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${registerResult.statusCode}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(registerResult.parsedBody, null, 2)}`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}\n`);
  } catch (error) {
    results.push({
      endpoint: 'POST /api/auth/register',
      status: null,
      success: false,
      error: error.message
    });
    console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message}\n`);
  }
  
  // –¢–µ—Å—Ç 3: Login
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/auth/login...');
  console.log('   Body: {"email": "smm@gelazutdinov.ru", "password": "admin123"}');
  try {
    const loginResult = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      email: 'smm@gelazutdinov.ru',
      password: 'admin123'
    });
    
    const success = loginResult.statusCode === 200;
    results.push({
      endpoint: 'POST /api/auth/login',
      status: loginResult.statusCode,
      success: success,
      response: loginResult.parsedBody
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${loginResult.statusCode}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(loginResult.parsedBody, null, 2)}`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}\n`);
  } catch (error) {
    results.push({
      endpoint: 'POST /api/auth/login',
      status: null,
      success: false,
      error: error.message
    });
    console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message}\n`);
  }
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log('==================');
  
  const successful = results.filter(r => r.success).length;
  console.log(`–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successful}/${results.length}`);
  
  console.log('\n–î–µ—Ç–∞–ª–∏:');
  results.forEach((result, index) => {
    console.log(`${index + 1}. ${result.endpoint}: ${result.success ? '‚úÖ' : '‚ùå'} (HTTP ${result.status || 'ERROR'})`);
    if (result.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
    }
  });
  
  console.log('\nüîó –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node test-simple-server.js');
}

runTests().catch(console.error);