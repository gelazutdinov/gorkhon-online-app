#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { spawn, execSync } = require('child_process');

console.log('üî• –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê');
console.log('='.repeat(50));

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('\nüì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  const serverDeps = [
    'express', 'cors', 'helmet', 'morgan', 'express-rate-limit',
    'dotenv', 'bcryptjs', 'jsonwebtoken', 'sqlite3', 'tsx'
  ];
  
  serverDeps.forEach(dep => {
    const inDeps = packageJson.dependencies && packageJson.dependencies[dep];
    const inDevDeps = packageJson.devDependencies && packageJson.devDependencies[dep];
    
    if (inDeps || inDevDeps) {
      console.log(`‚úÖ ${dep}: ${inDeps || inDevDeps}`);
    } else {
      console.log(`‚ùå ${dep}: –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  });
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ package.json: ${error.message}`);
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
console.log('\nüìÑ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:');
const serverFiles = [
  'server/src/app.ts',
  'server/src/routes/auth.ts',
  'server/src/routes/users.ts',
  'server/src/routes/admin.ts',
  'server/src/middleware/auth.ts',
  'server/src/middleware/errorHandler.ts',
  'server/src/services/DatabaseService.ts',
  'server/.env'
];

serverFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
  }
});

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
console.log('\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê .ENV:');
try {
  const envContent = fs.readFileSync('server/.env', 'utf8');
  const envVars = ['PORT=3001', 'JWT_SECRET', 'NODE_ENV=development'];
  
  envVars.forEach(envVar => {
    if (envContent.includes(envVar.split('=')[0])) {
      console.log(`‚úÖ ${envVar.split('=')[0]} –∑–∞–¥–∞–Ω`);
    } else {
      console.log(`‚ùå ${envVar.split('=')[0]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
  });
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ .env: ${error.message}`);
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ tsx
console.log('\nüîß –ü–†–û–í–ï–†–ö–ê TSX:');
try {
  const tsxVersion = execSync('npx tsx --version', { encoding: 'utf8', timeout: 5000 }).trim();
  console.log(`‚úÖ tsx –≤–µ—Ä—Å–∏—è: ${tsxVersion}`);
} catch (error) {
  console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å tsx: ${error.message}`);
}

// 5. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
console.log('\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê:');
console.log('–ö–æ–º–∞–Ω–¥–∞: cd server && npx tsx src/app.ts');
console.log('-'.repeat(50));

const serverProcess = spawn('npx', ['tsx', 'src/app.ts'], {
  cwd: 'server',
  stdio: ['pipe', 'pipe', 'pipe']
});

let serverOutput = '';
let serverErrors = '';
let serverStarted = false;

serverProcess.stdout.on('data', (data) => {
  const text = data.toString();
  serverOutput += text;
  console.log(`[OUT] ${text.trim()}`);
  
  if (text.includes('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω') || text.includes('üöÄ')) {
    serverStarted = true;
  }
});

serverProcess.stderr.on('data', (data) => {
  const text = data.toString();
  serverErrors += text;
  console.log(`[ERR] ${text.trim()}`);
});

serverProcess.on('error', (error) => {
  console.log(`[PROCESS ERROR] ${error.message}`);
});

// –ó–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  serverProcess.kill('SIGTERM');
  
  setTimeout(() => {
    console.log('\n' + '='.repeat(50));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
    console.log('='.repeat(50));
    
    if (serverStarted) {
      console.log('üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: cd server && npx tsx src/app.ts');
    } else {
      console.log('üí• –†–ï–ó–£–õ–¨–¢–ê–¢: –°–µ—Ä–≤–µ—Ä –ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
      
      // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
      if (serverErrors.includes('Cannot find module')) {
        console.log('üîç –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏');
        console.log('üí° –†–ï–®–ï–ù–ò–ï: npm install');
      }
      
      if (serverErrors.includes('EADDRINUSE')) {
        console.log('üîç –ü–†–û–ë–õ–ï–ú–ê: –ü–æ—Ä—Ç 3001 –∑–∞–Ω—è—Ç');
        console.log('üí° –†–ï–®–ï–ù–ò–ï: pkill -f "tsx.*app.ts" –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å PORT –≤ .env');
      }
      
      if (serverErrors.includes('ENOENT')) {
        console.log('üîç –ü–†–û–ë–õ–ï–ú–ê: –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º');
      }
      
      if (serverErrors.includes('SyntaxError')) {
        console.log('üîç –ü–†–û–ë–õ–ï–ú–ê: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞');
        console.log('üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ TypeScript');
      }
      
      if (!serverErrors.trim() && !serverOutput.trim()) {
        console.log('üîç –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –≤—ã–≤–æ–¥–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã');
        console.log('üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É tsx');
      }
    }
    
    console.log('\nüìã –ü–û–õ–ù–´–ô –í–´–í–û–î:');
    console.log('STDOUT:', serverOutput || '(–ø—É—Å—Ç–æ)');
    if (serverErrors) {
      console.log('STDERR:', serverErrors);
    }
    
    process.exit(serverStarted ? 0 : 1);
  }, 1000);
}, 8000);