import { spawn } from 'child_process';
import fetch from 'node-fetch';

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TypeScript —Å–µ—Ä–≤–µ—Ä–∞...\n');

const serverProcess = spawn('npx', ['tsx', 'src/app.ts'], {
  cwd: 'server',
  stdio: 'pipe'
});

let serverOutput = '';
let serverError = '';
let serverStarted = false;

serverProcess.stdout.on('data', (data) => {
  const output = data.toString();
  console.log(`[STDOUT] ${output.trim()}`);
  serverOutput += output;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
  if (output.includes('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É')) {
    serverStarted = true;
  }
});

serverProcess.stderr.on('data', (data) => {
  const error = data.toString();
  console.log(`[STDERR] ${error.trim()}`);
  serverError += error;
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
const waitForServer = (maxAttempts = 10, delay = 1000) => {
  return new Promise((resolve, reject) => {
    let attempts = 0;
    
    const checkServer = async () => {
      attempts++;
      try {
        const response = await fetch('http://localhost:3001/api/health', { timeout: 1000 });
        if (response.ok) {
          resolve(true);
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      } catch (error) {
        if (attempts >= maxAttempts) {
          reject(new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`));
        } else {
          console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}: —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤...`);
          setTimeout(checkServer, delay);
        }
      }
    };
    
    checkServer();
  });
};

// –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º endpoints
setTimeout(async () => {
  console.log('\nüìä –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...\n');
  
  try {
    await waitForServer();
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!\n');
    
    console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS ===\n');
    
    // Test 1: Health check
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/health...');
    try {
      const healthResponse = await fetch('http://localhost:3001/api/health');
      const healthData = await healthResponse.json();
      console.log(`   –°—Ç–∞—Ç—É—Å: ${healthResponse.status}`);
      console.log(`   ‚úÖ Health check —É—Å–ø–µ—à–µ–Ω:`, JSON.stringify(healthData, null, 2));
    } catch (error) {
      console.log(`   ‚ùå Health check –Ω–µ—É–¥–∞—á–µ–Ω: ${error.message}`);
    }

    // Test 2: Register
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/auth/register...');
    try {
      const registerResponse = await fetch('http://localhost:3001/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: "test@test.com",
          password: "123456",
          name: "Test User"
        })
      });
      const registerData = await registerResponse.json();
      console.log(`   –°—Ç–∞—Ç—É—Å: ${registerResponse.status}`);
      if (registerResponse.ok) {
        console.log(`   ‚úÖ Register —É—Å–ø–µ—à–µ–Ω:`, JSON.stringify(registerData, null, 2));
      } else {
        console.log(`   ‚ö†Ô∏è Register –æ—Ç–≤–µ—Ç–∏–ª:`, JSON.stringify(registerData, null, 2));
      }
    } catch (error) {
      console.log(`   ‚ùå Register –Ω–µ—É–¥–∞—á–µ–Ω: ${error.message}`);
    }

    // Test 3: Login
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/auth/login...');
    try {
      const loginResponse = await fetch('http://localhost:3001/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: "smm@gelazutdinov.ru",
          password: "admin123"
        })
      });
      const loginData = await loginResponse.json();
      console.log(`   –°—Ç–∞—Ç—É—Å: ${loginResponse.status}`);
      if (loginResponse.ok) {
        console.log(`   ‚úÖ Login —É—Å–ø–µ—à–µ–Ω:`, JSON.stringify(loginData, null, 2));
      } else {
        console.log(`   ‚ö†Ô∏è Login –æ—Ç–≤–µ—Ç–∏–ª:`, JSON.stringify(loginData, null, 2));
      }
    } catch (error) {
      console.log(`   ‚ùå Login –Ω–µ—É–¥–∞—á–µ–Ω: ${error.message}`);
    }

    console.log('\n=== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===');
    console.log(`üî• –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: ${serverStarted ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –ù–ï–£–î–ê–ß–ê'}`);
    console.log(`üìù –í—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞:\n${serverOutput}`);
    if (serverError) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n${serverError}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    console.log(`üìù –í—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞:\n${serverOutput}`);
    if (serverError) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n${serverError}`);
    }
  }
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
  console.log('\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  serverProcess.kill('SIGTERM');
  setTimeout(() => {
    serverProcess.kill('SIGKILL');
    process.exit(0);
  }, 2000);
}, 2000);

serverProcess.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
  process.exit(1);
});

serverProcess.on('exit', (code, signal) => {
  console.log(`\nüèÅ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –ö–æ–¥: ${code}, –°–∏–≥–Ω–∞–ª: ${signal}`);
  if (code !== 0 && code !== null) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
  }
});