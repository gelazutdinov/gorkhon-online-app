#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');

console.log('üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –°–ï–†–í–ï–†–ê');
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');

try {
  const appContent = fs.readFileSync('server/src/app.ts', 'utf8');
  
  if (appContent.includes('async function startServer()')) {
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î');
  } else {
    console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
  }
  
  if (appContent.includes('await DatabaseService.getInstance().initialize()')) {
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –û–∂–∏–¥–∞–Ω–∏–µ Promise –ë–î');
  } else {
    console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
  }
  
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è app.ts: ${error.message}`);
}

try {
  const dbContent = fs.readFileSync('server/src/services/DatabaseService.ts', 'utf8');
  
  if (dbContent.includes("path.join(process.cwd(), 'database.sqlite')")) {
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ë–î');
  } else {
    console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
  }
  
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DatabaseService.ts: ${error.message}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
console.log('–ö–æ–º–∞–Ω–¥–∞: cd server && npx tsx src/app.ts');
console.log('-'.repeat(50));

const serverProcess = spawn('npx', ['tsx', 'src/app.ts'], {
  cwd: 'server',
  stdio: ['pipe', 'pipe', 'pipe']
});

let stdout = '';
let stderr = '';
let dbInitialized = false;
let serverStarted = false;

serverProcess.stdout.on('data', (data) => {
  const text = data.toString();
  stdout += text;
  
  text.split('\n').forEach(line => {
    if (line.trim()) {
      console.log(`[OUT] ${line.trim()}`);
      
      if (line.includes('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')) {
        dbInitialized = true;
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      }
      
      if (line.includes('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É')) {
        serverStarted = true;
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      }
    }
  });
});

serverProcess.stderr.on('data', (data) => {
  const text = data.toString();
  stderr += text;
  
  text.split('\n').forEach(line => {
    if (line.trim()) {
      console.log(`[ERR] ${line.trim()}`);
    }
  });
});

serverProcess.on('error', (error) => {
  console.log(`[PROCESS] –û—à–∏–±–∫–∞: ${error.message}`);
});

// –¢–µ—Å—Ç health endpoint —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
setTimeout(() => {
  if (serverStarted) {
    console.log('\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...');
    
    const http = require('http');
    const req = http.request({
      hostname: 'localhost',
      port: 3001,
      path: '/api/health',
      method: 'GET',
      timeout: 3000
    }, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        if (res.statusCode === 200) {
          console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!');
          try {
            const healthData = JSON.parse(data);
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${healthData.status}`);
            console.log(`‚è±Ô∏è Uptime: ${Math.round(healthData.uptime)}s`);
          } catch (e) {
            console.log('üìä –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ JSON');
          }
        } else {
          console.log(`‚ùå Health endpoint –≤–µ—Ä–Ω—É–ª: ${res.statusCode}`);
        }
      });
    });

    req.on('error', (error) => {
      console.log(`‚ùå –û—à–∏–±–∫–∞ health endpoint: ${error.message}`);
    });

    req.on('timeout', () => {
      req.destroy();
      console.log('‚è∞ Health endpoint timeout');
    });

    req.end();
  }
}, 3000);

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('\n‚è∞ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
  serverProcess.kill('SIGTERM');
  
  setTimeout(() => {
    console.log('\n' + '='.repeat(50));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê');
    console.log('='.repeat(50));
    
    if (dbInitialized && serverStarted) {
      console.log('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!');
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è');
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
      console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ');
    } else {
      console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
      
      if (!dbInitialized) {
        console.log('   ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      }
      
      if (!serverStarted) {
        console.log('   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
      }
      
      if (stderr.trim()) {
        console.log('\nüîç –û—à–∏–±–∫–∏:');
        console.log(stderr);
      }
    }
    
    console.log('\nüìù –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:');
    console.log('cd server && npx tsx src/app.ts');
    
    process.exit(dbInitialized && serverStarted ? 0 : 1);
  }, 1000);
}, 8000);